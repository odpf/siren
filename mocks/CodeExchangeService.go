// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/odpf/siren/domain"
	mock "github.com/stretchr/testify/mock"
)

// CodeExchangeService is an autogenerated mock type for the CodeExchangeService type
type CodeExchangeService struct {
	mock.Mock
}

// Exchange provides a mock function with given fields: payload
func (_m *CodeExchangeService) Exchange(payload domain.OAuthPayload) (*domain.OAuthExchangeResponse, error) {
	ret := _m.Called(payload)

	var r0 *domain.OAuthExchangeResponse
	if rf, ok := ret.Get(0).(func(domain.OAuthPayload) *domain.OAuthExchangeResponse); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OAuthExchangeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.OAuthPayload) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: _a0
func (_m *CodeExchangeService) GetToken(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields:
func (_m *CodeExchangeService) Migrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
