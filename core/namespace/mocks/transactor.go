// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Transactor is an autogenerated mock type for the Transactor type
type Transactor struct {
	mock.Mock
}

type Transactor_Expecter struct {
	mock *mock.Mock
}

func (_m *Transactor) EXPECT() *Transactor_Expecter {
	return &Transactor_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with given fields: ctx
func (_m *Transactor) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactor_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Transactor_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Transactor_Expecter) Commit(ctx interface{}) *Transactor_Commit_Call {
	return &Transactor_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *Transactor_Commit_Call) Run(run func(ctx context.Context)) *Transactor_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Transactor_Commit_Call) Return(_a0 error) *Transactor_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

// Rollback provides a mock function with given fields: ctx, err
func (_m *Transactor) Rollback(ctx context.Context, err error) error {
	ret := _m.Called(ctx, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, error) error); ok {
		r0 = rf(ctx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactor_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type Transactor_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//  - ctx context.Context
//  - err error
func (_e *Transactor_Expecter) Rollback(ctx interface{}, err interface{}) *Transactor_Rollback_Call {
	return &Transactor_Rollback_Call{Call: _e.mock.On("Rollback", ctx, err)}
}

func (_c *Transactor_Rollback_Call) Run(run func(ctx context.Context, err error)) *Transactor_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *Transactor_Rollback_Call) Return(_a0 error) *Transactor_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

// WithTransaction provides a mock function with given fields: ctx
func (_m *Transactor) WithTransaction(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Transactor_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type Transactor_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Transactor_Expecter) WithTransaction(ctx interface{}) *Transactor_WithTransaction_Call {
	return &Transactor_WithTransaction_Call{Call: _e.mock.On("WithTransaction", ctx)}
}

func (_c *Transactor_WithTransaction_Call) Run(run func(ctx context.Context)) *Transactor_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Transactor_WithTransaction_Call) Return(_a0 context.Context) *Transactor_WithTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTransactor interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactor creates a new instance of Transactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactor(t mockConstructorTestingTNewTransactor) *Transactor {
	mock := &Transactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
