// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	receiver "github.com/odpf/siren/core/receiver"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// StrategyService is an autogenerated mock type for the StrategyService type
type StrategyService struct {
	mock.Mock
}

type StrategyService_Expecter struct {
	mock *mock.Mock
}

func (_m *StrategyService) EXPECT() *StrategyService_Expecter {
	return &StrategyService_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function with given fields: r
func (_m *StrategyService) Decrypt(r *receiver.Receiver) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*receiver.Receiver) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StrategyService_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type StrategyService_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//  - r *receiver.Receiver
func (_e *StrategyService_Expecter) Decrypt(r interface{}) *StrategyService_Decrypt_Call {
	return &StrategyService_Decrypt_Call{Call: _e.mock.On("Decrypt", r)}
}

func (_c *StrategyService_Decrypt_Call) Run(run func(r *receiver.Receiver)) *StrategyService_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*receiver.Receiver))
	})
	return _c
}

func (_c *StrategyService_Decrypt_Call) Return(_a0 error) *StrategyService_Decrypt_Call {
	_c.Call.Return(_a0)
	return _c
}

// Encrypt provides a mock function with given fields: r
func (_m *StrategyService) Encrypt(r *receiver.Receiver) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*receiver.Receiver) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StrategyService_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type StrategyService_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//  - r *receiver.Receiver
func (_e *StrategyService_Expecter) Encrypt(r interface{}) *StrategyService_Encrypt_Call {
	return &StrategyService_Encrypt_Call{Call: _e.mock.On("Encrypt", r)}
}

func (_c *StrategyService_Encrypt_Call) Run(run func(r *receiver.Receiver)) *StrategyService_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*receiver.Receiver))
	})
	return _c
}

func (_c *StrategyService_Encrypt_Call) Return(_a0 error) *StrategyService_Encrypt_Call {
	_c.Call.Return(_a0)
	return _c
}

// Notify provides a mock function with given fields: rcv, payloadMessage
func (_m *StrategyService) Notify(rcv *receiver.Receiver, payloadMessage receiver.NotificationMessage) error {
	ret := _m.Called(rcv, payloadMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(*receiver.Receiver, receiver.NotificationMessage) error); ok {
		r0 = rf(rcv, payloadMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StrategyService_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type StrategyService_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//  - rcv *receiver.Receiver
//  - payloadMessage receiver.NotificationMessage
func (_e *StrategyService_Expecter) Notify(rcv interface{}, payloadMessage interface{}) *StrategyService_Notify_Call {
	return &StrategyService_Notify_Call{Call: _e.mock.On("Notify", rcv, payloadMessage)}
}

func (_c *StrategyService_Notify_Call) Run(run func(rcv *receiver.Receiver, payloadMessage receiver.NotificationMessage)) *StrategyService_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*receiver.Receiver), args[1].(receiver.NotificationMessage))
	})
	return _c
}

func (_c *StrategyService_Notify_Call) Return(_a0 error) *StrategyService_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

// PopulateReceiver provides a mock function with given fields: rcv
func (_m *StrategyService) PopulateReceiver(rcv *receiver.Receiver) (*receiver.Receiver, error) {
	ret := _m.Called(rcv)

	var r0 *receiver.Receiver
	if rf, ok := ret.Get(0).(func(*receiver.Receiver) *receiver.Receiver); ok {
		r0 = rf(rcv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*receiver.Receiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*receiver.Receiver) error); ok {
		r1 = rf(rcv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StrategyService_PopulateReceiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopulateReceiver'
type StrategyService_PopulateReceiver_Call struct {
	*mock.Call
}

// PopulateReceiver is a helper method to define mock.On call
//  - rcv *receiver.Receiver
func (_e *StrategyService_Expecter) PopulateReceiver(rcv interface{}) *StrategyService_PopulateReceiver_Call {
	return &StrategyService_PopulateReceiver_Call{Call: _e.mock.On("PopulateReceiver", rcv)}
}

func (_c *StrategyService_PopulateReceiver_Call) Run(run func(rcv *receiver.Receiver)) *StrategyService_PopulateReceiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*receiver.Receiver))
	})
	return _c
}

func (_c *StrategyService_PopulateReceiver_Call) Return(_a0 *receiver.Receiver, _a1 error) *StrategyService_PopulateReceiver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewStrategyService creates a new instance of StrategyService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewStrategyService(t testing.TB) *StrategyService {
	mock := &StrategyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
