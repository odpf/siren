// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	receiver "github.com/odpf/siren/core/receiver"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SlackHelper is an autogenerated mock type for the SlackHelper type
type SlackHelper struct {
	mock.Mock
}

type SlackHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackHelper) EXPECT() *SlackHelper_Expecter {
	return &SlackHelper_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function with given fields: _a0
func (_m *SlackHelper) Decrypt(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackHelper_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type SlackHelper_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//  - _a0 string
func (_e *SlackHelper_Expecter) Decrypt(_a0 interface{}) *SlackHelper_Decrypt_Call {
	return &SlackHelper_Decrypt_Call{Call: _e.mock.On("Decrypt", _a0)}
}

func (_c *SlackHelper_Decrypt_Call) Run(run func(_a0 string)) *SlackHelper_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SlackHelper_Decrypt_Call) Return(_a0 string, _a1 error) *SlackHelper_Decrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Encrypt provides a mock function with given fields: _a0
func (_m *SlackHelper) Encrypt(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackHelper_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type SlackHelper_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//  - _a0 string
func (_e *SlackHelper_Expecter) Encrypt(_a0 interface{}) *SlackHelper_Encrypt_Call {
	return &SlackHelper_Encrypt_Call{Call: _e.mock.On("Encrypt", _a0)}
}

func (_c *SlackHelper_Encrypt_Call) Run(run func(_a0 string)) *SlackHelper_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SlackHelper_Encrypt_Call) Return(_a0 string, _a1 error) *SlackHelper_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTransform provides a mock function with given fields: _a0
func (_m *SlackHelper) PostTransform(_a0 *receiver.Receiver) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*receiver.Receiver) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackHelper_PostTransform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTransform'
type SlackHelper_PostTransform_Call struct {
	*mock.Call
}

// PostTransform is a helper method to define mock.On call
//  - _a0 *receiver.Receiver
func (_e *SlackHelper_Expecter) PostTransform(_a0 interface{}) *SlackHelper_PostTransform_Call {
	return &SlackHelper_PostTransform_Call{Call: _e.mock.On("PostTransform", _a0)}
}

func (_c *SlackHelper_PostTransform_Call) Run(run func(_a0 *receiver.Receiver)) *SlackHelper_PostTransform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*receiver.Receiver))
	})
	return _c
}

func (_c *SlackHelper_PostTransform_Call) Return(_a0 error) *SlackHelper_PostTransform_Call {
	_c.Call.Return(_a0)
	return _c
}

// PreTransform provides a mock function with given fields: _a0
func (_m *SlackHelper) PreTransform(_a0 *receiver.Receiver) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*receiver.Receiver) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackHelper_PreTransform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreTransform'
type SlackHelper_PreTransform_Call struct {
	*mock.Call
}

// PreTransform is a helper method to define mock.On call
//  - _a0 *receiver.Receiver
func (_e *SlackHelper_Expecter) PreTransform(_a0 interface{}) *SlackHelper_PreTransform_Call {
	return &SlackHelper_PreTransform_Call{Call: _e.mock.On("PreTransform", _a0)}
}

func (_c *SlackHelper_PreTransform_Call) Run(run func(_a0 *receiver.Receiver)) *SlackHelper_PreTransform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*receiver.Receiver))
	})
	return _c
}

func (_c *SlackHelper_PreTransform_Call) Return(_a0 error) *SlackHelper_PreTransform_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewSlackHelper creates a new instance of SlackHelper. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackHelper(t testing.TB) *SlackHelper {
	mock := &SlackHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
