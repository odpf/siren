// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	http "github.com/odpf/siren/plugins/receivers/http"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Exchanger is an autogenerated mock type for the Exchanger type
type Exchanger struct {
	mock.Mock
}

type Exchanger_Expecter struct {
	mock *mock.Mock
}

func (_m *Exchanger) EXPECT() *Exchanger_Expecter {
	return &Exchanger_Expecter{mock: &_m.Mock}
}

// Exchange provides a mock function with given fields: _a0, _a1, _a2
func (_m *Exchanger) Exchange(_a0 string, _a1 string, _a2 string) (http.CodeExchangeHTTPResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 http.CodeExchangeHTTPResponse
	if rf, ok := ret.Get(0).(func(string, string, string) http.CodeExchangeHTTPResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(http.CodeExchangeHTTPResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exchanger_Exchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exchange'
type Exchanger_Exchange_Call struct {
	*mock.Call
}

// Exchange is a helper method to define mock.On call
//  - _a0 string
//  - _a1 string
//  - _a2 string
func (_e *Exchanger_Expecter) Exchange(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Exchanger_Exchange_Call {
	return &Exchanger_Exchange_Call{Call: _e.mock.On("Exchange", _a0, _a1, _a2)}
}

func (_c *Exchanger_Exchange_Call) Run(run func(_a0 string, _a1 string, _a2 string)) *Exchanger_Exchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Exchanger_Exchange_Call) Return(_a0 http.CodeExchangeHTTPResponse, _a1 error) *Exchanger_Exchange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewExchanger creates a new instance of Exchanger. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewExchanger(t testing.TB) *Exchanger {
	mock := &Exchanger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
