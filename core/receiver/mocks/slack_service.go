// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	slack "github.com/odpf/siren/plugins/receivers/slack"

	testing "testing"
)

// SlackService is an autogenerated mock type for the SlackService type
type SlackService struct {
	mock.Mock
}

type SlackService_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackService) EXPECT() *SlackService_Expecter {
	return &SlackService_Expecter{mock: &_m.Mock}
}

// GetWorkspaceChannels provides a mock function with given fields: _a0
func (_m *SlackService) GetWorkspaceChannels(_a0 string) ([]slack.Channel, error) {
	ret := _m.Called(_a0)

	var r0 []slack.Channel
	if rf, ok := ret.Get(0).(func(string) []slack.Channel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slack.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackService_GetWorkspaceChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceChannels'
type SlackService_GetWorkspaceChannels_Call struct {
	*mock.Call
}

// GetWorkspaceChannels is a helper method to define mock.On call
//  - _a0 string
func (_e *SlackService_Expecter) GetWorkspaceChannels(_a0 interface{}) *SlackService_GetWorkspaceChannels_Call {
	return &SlackService_GetWorkspaceChannels_Call{Call: _e.mock.On("GetWorkspaceChannels", _a0)}
}

func (_c *SlackService_GetWorkspaceChannels_Call) Run(run func(_a0 string)) *SlackService_GetWorkspaceChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SlackService_GetWorkspaceChannels_Call) Return(_a0 []slack.Channel, _a1 error) *SlackService_GetWorkspaceChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewSlackService creates a new instance of SlackService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackService(t testing.TB) *SlackService {
	mock := &SlackService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
