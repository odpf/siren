// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	receiver "github.com/odpf/siren/core/receiver"
	mock "github.com/stretchr/testify/mock"
)

// Resolver is an autogenerated mock type for the Resolver type
type Resolver struct {
	mock.Mock
}

type Resolver_Expecter struct {
	mock *mock.Mock
}

func (_m *Resolver) EXPECT() *Resolver_Expecter {
	return &Resolver_Expecter{mock: &_m.Mock}
}

// EnrichSubscriptionConfig provides a mock function with given fields: subsConfs, configs
func (_m *Resolver) EnrichSubscriptionConfig(subsConfs map[string]string, configs receiver.Configurations) (map[string]string, error) {
	ret := _m.Called(subsConfs, configs)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(map[string]string, receiver.Configurations) map[string]string); ok {
		r0 = rf(subsConfs, configs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string, receiver.Configurations) error); ok {
		r1 = rf(subsConfs, configs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resolver_EnrichSubscriptionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnrichSubscriptionConfig'
type Resolver_EnrichSubscriptionConfig_Call struct {
	*mock.Call
}

// EnrichSubscriptionConfig is a helper method to define mock.On call
//  - subsConfs map[string]string
//  - configs receiver.Configurations
func (_e *Resolver_Expecter) EnrichSubscriptionConfig(subsConfs interface{}, configs interface{}) *Resolver_EnrichSubscriptionConfig_Call {
	return &Resolver_EnrichSubscriptionConfig_Call{Call: _e.mock.On("EnrichSubscriptionConfig", subsConfs, configs)}
}

func (_c *Resolver_EnrichSubscriptionConfig_Call) Run(run func(subsConfs map[string]string, configs receiver.Configurations)) *Resolver_EnrichSubscriptionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string), args[1].(receiver.Configurations))
	})
	return _c
}

func (_c *Resolver_EnrichSubscriptionConfig_Call) Return(_a0 map[string]string, _a1 error) *Resolver_EnrichSubscriptionConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Notify provides a mock function with given fields: ctx, configs, payloadMessage
func (_m *Resolver) Notify(ctx context.Context, configs receiver.Configurations, payloadMessage map[string]interface{}) error {
	ret := _m.Called(ctx, configs, payloadMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, receiver.Configurations, map[string]interface{}) error); ok {
		r0 = rf(ctx, configs, payloadMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resolver_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type Resolver_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//  - ctx context.Context
//  - configs receiver.Configurations
//  - payloadMessage map[string]interface{}
func (_e *Resolver_Expecter) Notify(ctx interface{}, configs interface{}, payloadMessage interface{}) *Resolver_Notify_Call {
	return &Resolver_Notify_Call{Call: _e.mock.On("Notify", ctx, configs, payloadMessage)}
}

func (_c *Resolver_Notify_Call) Run(run func(ctx context.Context, configs receiver.Configurations, payloadMessage map[string]interface{})) *Resolver_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(receiver.Configurations), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *Resolver_Notify_Call) Return(_a0 error) *Resolver_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

// PopulateDataFromConfigs provides a mock function with given fields: ctx, configs
func (_m *Resolver) PopulateDataFromConfigs(ctx context.Context, configs receiver.Configurations) (map[string]interface{}, error) {
	ret := _m.Called(ctx, configs)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, receiver.Configurations) map[string]interface{}); ok {
		r0 = rf(ctx, configs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, receiver.Configurations) error); ok {
		r1 = rf(ctx, configs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resolver_PopulateDataFromConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopulateDataFromConfigs'
type Resolver_PopulateDataFromConfigs_Call struct {
	*mock.Call
}

// PopulateDataFromConfigs is a helper method to define mock.On call
//  - ctx context.Context
//  - configs receiver.Configurations
func (_e *Resolver_Expecter) PopulateDataFromConfigs(ctx interface{}, configs interface{}) *Resolver_PopulateDataFromConfigs_Call {
	return &Resolver_PopulateDataFromConfigs_Call{Call: _e.mock.On("PopulateDataFromConfigs", ctx, configs)}
}

func (_c *Resolver_PopulateDataFromConfigs_Call) Run(run func(ctx context.Context, configs receiver.Configurations)) *Resolver_PopulateDataFromConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(receiver.Configurations))
	})
	return _c
}

func (_c *Resolver_PopulateDataFromConfigs_Call) Return(_a0 map[string]interface{}, _a1 error) *Resolver_PopulateDataFromConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostHookTransformConfigs provides a mock function with given fields: ctx, configs
func (_m *Resolver) PostHookTransformConfigs(ctx context.Context, configs receiver.Configurations) (receiver.Configurations, error) {
	ret := _m.Called(ctx, configs)

	var r0 receiver.Configurations
	if rf, ok := ret.Get(0).(func(context.Context, receiver.Configurations) receiver.Configurations); ok {
		r0 = rf(ctx, configs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(receiver.Configurations)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, receiver.Configurations) error); ok {
		r1 = rf(ctx, configs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resolver_PostHookTransformConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostHookTransformConfigs'
type Resolver_PostHookTransformConfigs_Call struct {
	*mock.Call
}

// PostHookTransformConfigs is a helper method to define mock.On call
//  - ctx context.Context
//  - configs receiver.Configurations
func (_e *Resolver_Expecter) PostHookTransformConfigs(ctx interface{}, configs interface{}) *Resolver_PostHookTransformConfigs_Call {
	return &Resolver_PostHookTransformConfigs_Call{Call: _e.mock.On("PostHookTransformConfigs", ctx, configs)}
}

func (_c *Resolver_PostHookTransformConfigs_Call) Run(run func(ctx context.Context, configs receiver.Configurations)) *Resolver_PostHookTransformConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(receiver.Configurations))
	})
	return _c
}

func (_c *Resolver_PostHookTransformConfigs_Call) Return(_a0 receiver.Configurations, _a1 error) *Resolver_PostHookTransformConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PreHookTransformConfigs provides a mock function with given fields: ctx, configs
func (_m *Resolver) PreHookTransformConfigs(ctx context.Context, configs receiver.Configurations) (receiver.Configurations, error) {
	ret := _m.Called(ctx, configs)

	var r0 receiver.Configurations
	if rf, ok := ret.Get(0).(func(context.Context, receiver.Configurations) receiver.Configurations); ok {
		r0 = rf(ctx, configs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(receiver.Configurations)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, receiver.Configurations) error); ok {
		r1 = rf(ctx, configs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resolver_PreHookTransformConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreHookTransformConfigs'
type Resolver_PreHookTransformConfigs_Call struct {
	*mock.Call
}

// PreHookTransformConfigs is a helper method to define mock.On call
//  - ctx context.Context
//  - configs receiver.Configurations
func (_e *Resolver_Expecter) PreHookTransformConfigs(ctx interface{}, configs interface{}) *Resolver_PreHookTransformConfigs_Call {
	return &Resolver_PreHookTransformConfigs_Call{Call: _e.mock.On("PreHookTransformConfigs", ctx, configs)}
}

func (_c *Resolver_PreHookTransformConfigs_Call) Run(run func(ctx context.Context, configs receiver.Configurations)) *Resolver_PreHookTransformConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(receiver.Configurations))
	})
	return _c
}

func (_c *Resolver_PreHookTransformConfigs_Call) Return(_a0 receiver.Configurations, _a1 error) *Resolver_PreHookTransformConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ValidateConfigurations provides a mock function with given fields: configs
func (_m *Resolver) ValidateConfigurations(configs receiver.Configurations) error {
	ret := _m.Called(configs)

	var r0 error
	if rf, ok := ret.Get(0).(func(receiver.Configurations) error); ok {
		r0 = rf(configs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resolver_ValidateConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfigurations'
type Resolver_ValidateConfigurations_Call struct {
	*mock.Call
}

// ValidateConfigurations is a helper method to define mock.On call
//  - configs receiver.Configurations
func (_e *Resolver_Expecter) ValidateConfigurations(configs interface{}) *Resolver_ValidateConfigurations_Call {
	return &Resolver_ValidateConfigurations_Call{Call: _e.mock.On("ValidateConfigurations", configs)}
}

func (_c *Resolver_ValidateConfigurations_Call) Run(run func(configs receiver.Configurations)) *Resolver_ValidateConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(receiver.Configurations))
	})
	return _c
}

func (_c *Resolver_ValidateConfigurations_Call) Return(_a0 error) *Resolver_ValidateConfigurations_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewResolver creates a new instance of Resolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResolver(t mockConstructorTestingTNewResolver) *Resolver {
	mock := &Resolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
