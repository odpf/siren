// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/odpf/siren/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ProviderService is an autogenerated mock type for the ProviderService type
type ProviderService struct {
	mock.Mock
}

type ProviderService_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderService) EXPECT() *ProviderService_Expecter {
	return &ProviderService_Expecter{mock: &_m.Mock}
}

// CreateProvider provides a mock function with given fields: _a0
func (_m *ProviderService) CreateProvider(_a0 *domain.Provider) (*domain.Provider, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Provider
	if rf, ok := ret.Get(0).(func(*domain.Provider) *domain.Provider); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Provider) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderService_CreateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProvider'
type ProviderService_CreateProvider_Call struct {
	*mock.Call
}

// CreateProvider is a helper method to define mock.On call
//  - _a0 *domain.Provider
func (_e *ProviderService_Expecter) CreateProvider(_a0 interface{}) *ProviderService_CreateProvider_Call {
	return &ProviderService_CreateProvider_Call{Call: _e.mock.On("CreateProvider", _a0)}
}

func (_c *ProviderService_CreateProvider_Call) Run(run func(_a0 *domain.Provider)) *ProviderService_CreateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Provider))
	})
	return _c
}

func (_c *ProviderService_CreateProvider_Call) Return(_a0 *domain.Provider, _a1 error) *ProviderService_CreateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteProvider provides a mock function with given fields: _a0
func (_m *ProviderService) DeleteProvider(_a0 uint64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderService_DeleteProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvider'
type ProviderService_DeleteProvider_Call struct {
	*mock.Call
}

// DeleteProvider is a helper method to define mock.On call
//  - _a0 uint64
func (_e *ProviderService_Expecter) DeleteProvider(_a0 interface{}) *ProviderService_DeleteProvider_Call {
	return &ProviderService_DeleteProvider_Call{Call: _e.mock.On("DeleteProvider", _a0)}
}

func (_c *ProviderService_DeleteProvider_Call) Run(run func(_a0 uint64)) *ProviderService_DeleteProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ProviderService_DeleteProvider_Call) Return(_a0 error) *ProviderService_DeleteProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetProvider provides a mock function with given fields: _a0
func (_m *ProviderService) GetProvider(_a0 uint64) (*domain.Provider, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Provider
	if rf, ok := ret.Get(0).(func(uint64) *domain.Provider); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderService_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type ProviderService_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
//  - _a0 uint64
func (_e *ProviderService_Expecter) GetProvider(_a0 interface{}) *ProviderService_GetProvider_Call {
	return &ProviderService_GetProvider_Call{Call: _e.mock.On("GetProvider", _a0)}
}

func (_c *ProviderService_GetProvider_Call) Run(run func(_a0 uint64)) *ProviderService_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ProviderService_GetProvider_Call) Return(_a0 *domain.Provider, _a1 error) *ProviderService_GetProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListProviders provides a mock function with given fields: _a0
func (_m *ProviderService) ListProviders(_a0 map[string]interface{}) ([]*domain.Provider, error) {
	ret := _m.Called(_a0)

	var r0 []*domain.Provider
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []*domain.Provider); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderService_ListProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProviders'
type ProviderService_ListProviders_Call struct {
	*mock.Call
}

// ListProviders is a helper method to define mock.On call
//  - _a0 map[string]interface{}
func (_e *ProviderService_Expecter) ListProviders(_a0 interface{}) *ProviderService_ListProviders_Call {
	return &ProviderService_ListProviders_Call{Call: _e.mock.On("ListProviders", _a0)}
}

func (_c *ProviderService_ListProviders_Call) Run(run func(_a0 map[string]interface{})) *ProviderService_ListProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *ProviderService_ListProviders_Call) Return(_a0 []*domain.Provider, _a1 error) *ProviderService_ListProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Migrate provides a mock function with given fields:
func (_m *ProviderService) Migrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderService_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type ProviderService_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
func (_e *ProviderService_Expecter) Migrate() *ProviderService_Migrate_Call {
	return &ProviderService_Migrate_Call{Call: _e.mock.On("Migrate")}
}

func (_c *ProviderService_Migrate_Call) Run(run func()) *ProviderService_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProviderService_Migrate_Call) Return(_a0 error) *ProviderService_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateProvider provides a mock function with given fields: _a0
func (_m *ProviderService) UpdateProvider(_a0 *domain.Provider) (*domain.Provider, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Provider
	if rf, ok := ret.Get(0).(func(*domain.Provider) *domain.Provider); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Provider) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderService_UpdateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProvider'
type ProviderService_UpdateProvider_Call struct {
	*mock.Call
}

// UpdateProvider is a helper method to define mock.On call
//  - _a0 *domain.Provider
func (_e *ProviderService_Expecter) UpdateProvider(_a0 interface{}) *ProviderService_UpdateProvider_Call {
	return &ProviderService_UpdateProvider_Call{Call: _e.mock.On("UpdateProvider", _a0)}
}

func (_c *ProviderService_UpdateProvider_Call) Run(run func(_a0 *domain.Provider)) *ProviderService_UpdateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Provider))
	})
	return _c
}

func (_c *ProviderService_UpdateProvider_Call) Return(_a0 *domain.Provider, _a1 error) *ProviderService_UpdateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewProviderService creates a new instance of ProviderService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewProviderService(t testing.TB) *ProviderService {
	mock := &ProviderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
