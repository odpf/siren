// Code generated by mockery v2.6.0. DO NOT EDIT.

package rules

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	rwrulefmt "github.com/grafana/cortex-tools/pkg/rules/rwrulefmt"
)

// cortexCaller is an autogenerated mock type for the cortexCaller type
type cortexCallerMock struct {
	mock.Mock
}

// CreateRuleGroup provides a mock function with given fields: ctx, namespace, rg
func (_m *cortexCallerMock) CreateRuleGroup(ctx context.Context, namespace string, rg rwrulefmt.RuleGroup) error {
	ret := _m.Called(ctx, namespace, rg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, rwrulefmt.RuleGroup) error); ok {
		r0 = rf(ctx, namespace, rg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRuleGroup provides a mock function with given fields: ctx, namespace, groupName
func (_m *cortexCallerMock) DeleteRuleGroup(ctx context.Context, namespace string, groupName string) error {
	ret := _m.Called(ctx, namespace, groupName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRuleGroup provides a mock function with given fields: ctx, namespace, groupName
func (_m *cortexCallerMock) GetRuleGroup(ctx context.Context, namespace string, groupName string) (*rwrulefmt.RuleGroup, error) {
	ret := _m.Called(ctx, namespace, groupName)

	var r0 *rwrulefmt.RuleGroup
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *rwrulefmt.RuleGroup); ok {
		r0 = rf(ctx, namespace, groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rwrulefmt.RuleGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: ctx, namespace
func (_m *cortexCallerMock) ListRules(ctx context.Context, namespace string) (map[string][]rwrulefmt.RuleGroup, error) {
	ret := _m.Called(ctx, namespace)

	var r0 map[string][]rwrulefmt.RuleGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string][]rwrulefmt.RuleGroup); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]rwrulefmt.RuleGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
