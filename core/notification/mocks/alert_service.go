// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AlertService is an autogenerated mock type for the AlertService type
type AlertService struct {
	mock.Mock
}

type AlertService_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertService) EXPECT() *AlertService_Expecter {
	return &AlertService_Expecter{mock: &_m.Mock}
}

// UpdateSilenceStatus provides a mock function with given fields: ctx, alertIDs, hasSilenced, hasNonSilenced
func (_m *AlertService) UpdateSilenceStatus(ctx context.Context, alertIDs []int64, hasSilenced bool, hasNonSilenced bool) error {
	ret := _m.Called(ctx, alertIDs, hasSilenced, hasNonSilenced)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, bool, bool) error); ok {
		r0 = rf(ctx, alertIDs, hasSilenced, hasNonSilenced)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AlertService_UpdateSilenceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSilenceStatus'
type AlertService_UpdateSilenceStatus_Call struct {
	*mock.Call
}

// UpdateSilenceStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - alertIDs []int64
//   - hasSilenced bool
//   - hasNonSilenced bool
func (_e *AlertService_Expecter) UpdateSilenceStatus(ctx interface{}, alertIDs interface{}, hasSilenced interface{}, hasNonSilenced interface{}) *AlertService_UpdateSilenceStatus_Call {
	return &AlertService_UpdateSilenceStatus_Call{Call: _e.mock.On("UpdateSilenceStatus", ctx, alertIDs, hasSilenced, hasNonSilenced)}
}

func (_c *AlertService_UpdateSilenceStatus_Call) Run(run func(ctx context.Context, alertIDs []int64, hasSilenced bool, hasNonSilenced bool)) *AlertService_UpdateSilenceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64), args[2].(bool), args[3].(bool))
	})
	return _c
}

func (_c *AlertService_UpdateSilenceStatus_Call) Return(_a0 error) *AlertService_UpdateSilenceStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAlertService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAlertService creates a new instance of AlertService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAlertService(t mockConstructorTestingTNewAlertService) *AlertService {
	mock := &AlertService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
