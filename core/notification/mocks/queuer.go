// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	notification "github.com/odpf/siren/core/notification"
	mock "github.com/stretchr/testify/mock"
)

// Queuer is an autogenerated mock type for the Queuer type
type Queuer struct {
	mock.Mock
}

type Queuer_Expecter struct {
	mock *mock.Mock
}

func (_m *Queuer) EXPECT() *Queuer_Expecter {
	return &Queuer_Expecter{mock: &_m.Mock}
}

// Dequeue provides a mock function with given fields: ctx, receiverTypes, batchSize, handlerFn
func (_m *Queuer) Dequeue(ctx context.Context, receiverTypes []string, batchSize int, handlerFn func(context.Context, []notification.Message) error) error {
	ret := _m.Called(ctx, receiverTypes, batchSize, handlerFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int, func(context.Context, []notification.Message) error) error); ok {
		r0 = rf(ctx, receiverTypes, batchSize, handlerFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queuer_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type Queuer_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
//  - ctx context.Context
//  - receiverTypes []string
//  - batchSize int
//  - handlerFn func(context.Context , []notification.Message) error
func (_e *Queuer_Expecter) Dequeue(ctx interface{}, receiverTypes interface{}, batchSize interface{}, handlerFn interface{}) *Queuer_Dequeue_Call {
	return &Queuer_Dequeue_Call{Call: _e.mock.On("Dequeue", ctx, receiverTypes, batchSize, handlerFn)}
}

func (_c *Queuer_Dequeue_Call) Run(run func(ctx context.Context, receiverTypes []string, batchSize int, handlerFn func(context.Context, []notification.Message) error)) *Queuer_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(int), args[3].(func(context.Context, []notification.Message) error))
	})
	return _c
}

func (_c *Queuer_Dequeue_Call) Return(_a0 error) *Queuer_Dequeue_Call {
	_c.Call.Return(_a0)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, ms
func (_m *Queuer) Enqueue(ctx context.Context, ms ...notification.Message) error {
	_va := make([]interface{}, len(ms))
	for _i := range ms {
		_va[_i] = ms[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...notification.Message) error); ok {
		r0 = rf(ctx, ms...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queuer_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type Queuer_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//  - ctx context.Context
//  - ms ...notification.Message
func (_e *Queuer_Expecter) Enqueue(ctx interface{}, ms ...interface{}) *Queuer_Enqueue_Call {
	return &Queuer_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{ctx}, ms...)...)}
}

func (_c *Queuer_Enqueue_Call) Run(run func(ctx context.Context, ms ...notification.Message)) *Queuer_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]notification.Message, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(notification.Message)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Queuer_Enqueue_Call) Return(_a0 error) *Queuer_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

// ErrorHandler provides a mock function with given fields: ctx, ms
func (_m *Queuer) ErrorHandler(ctx context.Context, ms notification.Message) error {
	ret := _m.Called(ctx, ms)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, notification.Message) error); ok {
		r0 = rf(ctx, ms)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queuer_ErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorHandler'
type Queuer_ErrorHandler_Call struct {
	*mock.Call
}

// ErrorHandler is a helper method to define mock.On call
//  - ctx context.Context
//  - ms notification.Message
func (_e *Queuer_Expecter) ErrorHandler(ctx interface{}, ms interface{}) *Queuer_ErrorHandler_Call {
	return &Queuer_ErrorHandler_Call{Call: _e.mock.On("ErrorHandler", ctx, ms)}
}

func (_c *Queuer_ErrorHandler_Call) Run(run func(ctx context.Context, ms notification.Message)) *Queuer_ErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(notification.Message))
	})
	return _c
}

func (_c *Queuer_ErrorHandler_Call) Return(_a0 error) *Queuer_ErrorHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *Queuer) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queuer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Queuer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Queuer_Expecter) Stop(ctx interface{}) *Queuer_Stop_Call {
	return &Queuer_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *Queuer_Stop_Call) Run(run func(ctx context.Context)) *Queuer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Queuer_Stop_Call) Return(_a0 error) *Queuer_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

// SuccessHandler provides a mock function with given fields: ctx, ms
func (_m *Queuer) SuccessHandler(ctx context.Context, ms notification.Message) error {
	ret := _m.Called(ctx, ms)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, notification.Message) error); ok {
		r0 = rf(ctx, ms)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queuer_SuccessHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuccessHandler'
type Queuer_SuccessHandler_Call struct {
	*mock.Call
}

// SuccessHandler is a helper method to define mock.On call
//  - ctx context.Context
//  - ms notification.Message
func (_e *Queuer_Expecter) SuccessHandler(ctx interface{}, ms interface{}) *Queuer_SuccessHandler_Call {
	return &Queuer_SuccessHandler_Call{Call: _e.mock.On("SuccessHandler", ctx, ms)}
}

func (_c *Queuer_SuccessHandler_Call) Run(run func(ctx context.Context, ms notification.Message)) *Queuer_SuccessHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(notification.Message))
	})
	return _c
}

func (_c *Queuer_SuccessHandler_Call) Return(_a0 error) *Queuer_SuccessHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewQueuer interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueuer creates a new instance of Queuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueuer(t mockConstructorTestingTNewQueuer) *Queuer {
	mock := &Queuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
