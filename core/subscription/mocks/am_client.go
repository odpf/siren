// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	alertmanager "github.com/odpf/siren/core/subscription/alertmanager"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// AMClient is an autogenerated mock type for the AMClient type
type AMClient struct {
	mock.Mock
}

type AMClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AMClient) EXPECT() *AMClient_Expecter {
	return &AMClient_Expecter{mock: &_m.Mock}
}

// SyncConfig provides a mock function with given fields: _a0, _a1
func (_m *AMClient) SyncConfig(_a0 alertmanager.AMConfig, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(alertmanager.AMConfig, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AMClient_SyncConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncConfig'
type AMClient_SyncConfig_Call struct {
	*mock.Call
}

// SyncConfig is a helper method to define mock.On call
//  - _a0 alertmanager.AMConfig
//  - _a1 string
func (_e *AMClient_Expecter) SyncConfig(_a0 interface{}, _a1 interface{}) *AMClient_SyncConfig_Call {
	return &AMClient_SyncConfig_Call{Call: _e.mock.On("SyncConfig", _a0, _a1)}
}

func (_c *AMClient_SyncConfig_Call) Run(run func(_a0 alertmanager.AMConfig, _a1 string)) *AMClient_SyncConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(alertmanager.AMConfig), args[1].(string))
	})
	return _c
}

func (_c *AMClient_SyncConfig_Call) Return(_a0 error) *AMClient_SyncConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewAMClient creates a new instance of AMClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAMClient(t testing.TB) *AMClient {
	mock := &AMClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
