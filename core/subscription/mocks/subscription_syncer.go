// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	subscription "github.com/odpf/siren/core/subscription"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionSyncer is an autogenerated mock type for the SubscriptionSyncer type
type SubscriptionSyncer struct {
	mock.Mock
}

type SubscriptionSyncer_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscriptionSyncer) EXPECT() *SubscriptionSyncer_Expecter {
	return &SubscriptionSyncer_Expecter{mock: &_m.Mock}
}

// CreateSubscription provides a mock function with given fields: ctx, sub, subscriptionsInNamespace, namespaceURN
func (_m *SubscriptionSyncer) CreateSubscription(ctx context.Context, sub *subscription.Subscription, subscriptionsInNamespace []subscription.Subscription, namespaceURN string) error {
	ret := _m.Called(ctx, sub, subscriptionsInNamespace, namespaceURN)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscription.Subscription, []subscription.Subscription, string) error); ok {
		r0 = rf(ctx, sub, subscriptionsInNamespace, namespaceURN)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionSyncer_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type SubscriptionSyncer_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//  - ctx context.Context
//  - sub *subscription.Subscription
//  - subscriptionsInNamespace []subscription.Subscription
//  - namespaceURN string
func (_e *SubscriptionSyncer_Expecter) CreateSubscription(ctx interface{}, sub interface{}, subscriptionsInNamespace interface{}, namespaceURN interface{}) *SubscriptionSyncer_CreateSubscription_Call {
	return &SubscriptionSyncer_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", ctx, sub, subscriptionsInNamespace, namespaceURN)}
}

func (_c *SubscriptionSyncer_CreateSubscription_Call) Run(run func(ctx context.Context, sub *subscription.Subscription, subscriptionsInNamespace []subscription.Subscription, namespaceURN string)) *SubscriptionSyncer_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscription.Subscription), args[2].([]subscription.Subscription), args[3].(string))
	})
	return _c
}

func (_c *SubscriptionSyncer_CreateSubscription_Call) Return(_a0 error) *SubscriptionSyncer_CreateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteSubscription provides a mock function with given fields: ctx, sub, subscriptionsInNamespace, namespaceURN
func (_m *SubscriptionSyncer) DeleteSubscription(ctx context.Context, sub *subscription.Subscription, subscriptionsInNamespace []subscription.Subscription, namespaceURN string) error {
	ret := _m.Called(ctx, sub, subscriptionsInNamespace, namespaceURN)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscription.Subscription, []subscription.Subscription, string) error); ok {
		r0 = rf(ctx, sub, subscriptionsInNamespace, namespaceURN)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionSyncer_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type SubscriptionSyncer_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//  - ctx context.Context
//  - sub *subscription.Subscription
//  - subscriptionsInNamespace []subscription.Subscription
//  - namespaceURN string
func (_e *SubscriptionSyncer_Expecter) DeleteSubscription(ctx interface{}, sub interface{}, subscriptionsInNamespace interface{}, namespaceURN interface{}) *SubscriptionSyncer_DeleteSubscription_Call {
	return &SubscriptionSyncer_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", ctx, sub, subscriptionsInNamespace, namespaceURN)}
}

func (_c *SubscriptionSyncer_DeleteSubscription_Call) Run(run func(ctx context.Context, sub *subscription.Subscription, subscriptionsInNamespace []subscription.Subscription, namespaceURN string)) *SubscriptionSyncer_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscription.Subscription), args[2].([]subscription.Subscription), args[3].(string))
	})
	return _c
}

func (_c *SubscriptionSyncer_DeleteSubscription_Call) Return(_a0 error) *SubscriptionSyncer_DeleteSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateSubscription provides a mock function with given fields: ctx, sub, subscriptionsInNamespace, namespaceURN
func (_m *SubscriptionSyncer) UpdateSubscription(ctx context.Context, sub *subscription.Subscription, subscriptionsInNamespace []subscription.Subscription, namespaceURN string) error {
	ret := _m.Called(ctx, sub, subscriptionsInNamespace, namespaceURN)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscription.Subscription, []subscription.Subscription, string) error); ok {
		r0 = rf(ctx, sub, subscriptionsInNamespace, namespaceURN)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionSyncer_UpdateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscription'
type SubscriptionSyncer_UpdateSubscription_Call struct {
	*mock.Call
}

// UpdateSubscription is a helper method to define mock.On call
//  - ctx context.Context
//  - sub *subscription.Subscription
//  - subscriptionsInNamespace []subscription.Subscription
//  - namespaceURN string
func (_e *SubscriptionSyncer_Expecter) UpdateSubscription(ctx interface{}, sub interface{}, subscriptionsInNamespace interface{}, namespaceURN interface{}) *SubscriptionSyncer_UpdateSubscription_Call {
	return &SubscriptionSyncer_UpdateSubscription_Call{Call: _e.mock.On("UpdateSubscription", ctx, sub, subscriptionsInNamespace, namespaceURN)}
}

func (_c *SubscriptionSyncer_UpdateSubscription_Call) Run(run func(ctx context.Context, sub *subscription.Subscription, subscriptionsInNamespace []subscription.Subscription, namespaceURN string)) *SubscriptionSyncer_UpdateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscription.Subscription), args[2].([]subscription.Subscription), args[3].(string))
	})
	return _c
}

func (_c *SubscriptionSyncer_UpdateSubscription_Call) Return(_a0 error) *SubscriptionSyncer_UpdateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSubscriptionSyncer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubscriptionSyncer creates a new instance of SubscriptionSyncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriptionSyncer(t mockConstructorTestingTNewSubscriptionSyncer) *SubscriptionSyncer {
	mock := &SubscriptionSyncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
