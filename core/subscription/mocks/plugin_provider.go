// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	subscription "github.com/odpf/siren/core/subscription"
	mock "github.com/stretchr/testify/mock"
)

// ProviderPlugin is an autogenerated mock type for the ProviderPlugin type
type ProviderPlugin struct {
	mock.Mock
}

type ProviderPlugin_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderPlugin) EXPECT() *ProviderPlugin_Expecter {
	return &ProviderPlugin_Expecter{mock: &_m.Mock}
}

// SyncSubscriptions provides a mock function with given fields: ctx, subs, namespaceURN
func (_m *ProviderPlugin) SyncSubscriptions(ctx context.Context, subs []subscription.Subscription, namespaceURN string) error {
	ret := _m.Called(ctx, subs, namespaceURN)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []subscription.Subscription, string) error); ok {
		r0 = rf(ctx, subs, namespaceURN)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderPlugin_SyncSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncSubscriptions'
type ProviderPlugin_SyncSubscriptions_Call struct {
	*mock.Call
}

// SyncSubscriptions is a helper method to define mock.On call
//  - ctx context.Context
//  - subs []subscription.Subscription
//  - namespaceURN string
func (_e *ProviderPlugin_Expecter) SyncSubscriptions(ctx interface{}, subs interface{}, namespaceURN interface{}) *ProviderPlugin_SyncSubscriptions_Call {
	return &ProviderPlugin_SyncSubscriptions_Call{Call: _e.mock.On("SyncSubscriptions", ctx, subs, namespaceURN)}
}

func (_c *ProviderPlugin_SyncSubscriptions_Call) Run(run func(ctx context.Context, subs []subscription.Subscription, namespaceURN string)) *ProviderPlugin_SyncSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]subscription.Subscription), args[2].(string))
	})
	return _c
}

func (_c *ProviderPlugin_SyncSubscriptions_Call) Return(_a0 error) *ProviderPlugin_SyncSubscriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewProviderPlugin interface {
	mock.TestingT
	Cleanup(func())
}

// NewProviderPlugin creates a new instance of ProviderPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProviderPlugin(t mockConstructorTestingTNewProviderPlugin) *ProviderPlugin {
	mock := &ProviderPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
