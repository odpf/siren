// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	alert "github.com/odpf/siren/core/alert"

	mock "github.com/stretchr/testify/mock"
)

// AlertTransformer is an autogenerated mock type for the AlertTransformer type
type AlertTransformer struct {
	mock.Mock
}

type AlertTransformer_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertTransformer) EXPECT() *AlertTransformer_Expecter {
	return &AlertTransformer_Expecter{mock: &_m.Mock}
}

// TransformToAlerts provides a mock function with given fields: ctx, providerID, body
func (_m *AlertTransformer) TransformToAlerts(ctx context.Context, providerID uint64, body map[string]interface{}) ([]*alert.Alert, int, error) {
	ret := _m.Called(ctx, providerID, body)

	var r0 []*alert.Alert
	if rf, ok := ret.Get(0).(func(context.Context, uint64, map[string]interface{}) []*alert.Alert); ok {
		r0 = rf(ctx, providerID, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*alert.Alert)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, uint64, map[string]interface{}) int); ok {
		r1 = rf(ctx, providerID, body)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uint64, map[string]interface{}) error); ok {
		r2 = rf(ctx, providerID, body)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertTransformer_TransformToAlerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformToAlerts'
type AlertTransformer_TransformToAlerts_Call struct {
	*mock.Call
}

// TransformToAlerts is a helper method to define mock.On call
//  - ctx context.Context
//  - providerID uint64
//  - body map[string]interface{}
func (_e *AlertTransformer_Expecter) TransformToAlerts(ctx interface{}, providerID interface{}, body interface{}) *AlertTransformer_TransformToAlerts_Call {
	return &AlertTransformer_TransformToAlerts_Call{Call: _e.mock.On("TransformToAlerts", ctx, providerID, body)}
}

func (_c *AlertTransformer_TransformToAlerts_Call) Run(run func(ctx context.Context, providerID uint64, body map[string]interface{})) *AlertTransformer_TransformToAlerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *AlertTransformer_TransformToAlerts_Call) Return(_a0 []*alert.Alert, _a1 int, _a2 error) *AlertTransformer_TransformToAlerts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

type mockConstructorTestingTNewAlertTransformer interface {
	mock.TestingT
	Cleanup(func())
}

// NewAlertTransformer creates a new instance of AlertTransformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAlertTransformer(t mockConstructorTestingTNewAlertTransformer) *AlertTransformer {
	mock := &AlertTransformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
