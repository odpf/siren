// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: odpf/siren/v1beta1/siren.proto

package sirenv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PingRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PingResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Provider) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Host

	// no validation rules for Urn

	// no validation rules for Name

	if _, ok := _Provider_Type_InLookup[m.GetType()]; !ok {
		return ProviderValidationError{
			field:  "Type",
			reason: "value must be in list [cortex]",
		}
	}

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

var _Provider_Type_InLookup = map[string]struct{}{
	"cortex": {},
}

// Validate checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProvidersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Urn

	// no validation rules for Type

	return nil
}

// ListProvidersRequestValidationError is the validation error returned by
// ListProvidersRequest.Validate if the designated constraints aren't met.
type ListProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersRequestValidationError) ErrorName() string {
	return "ListProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersRequestValidationError{}

// Validate checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProvidersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProvidersResponseValidationError is the validation error returned by
// ListProvidersResponse.Validate if the designated constraints aren't met.
type ListProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponseValidationError) ErrorName() string {
	return "ListProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponseValidationError{}

// Validate checks the field values on CreateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if uri, err := url.Parse(m.GetHost()); err != nil {
		return CreateProviderRequestValidationError{
			field:  "Host",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return CreateProviderRequestValidationError{
			field:  "Host",
			reason: "value must be absolute",
		}
	}

	if !_CreateProviderRequest_Urn_Pattern.MatchString(m.GetUrn()) {
		return CreateProviderRequestValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_CreateProviderRequest_Name_Pattern.MatchString(m.GetName()) {
		return CreateProviderRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if _, ok := _CreateProviderRequest_Type_InLookup[m.GetType()]; !ok {
		return CreateProviderRequestValidationError{
			field:  "Type",
			reason: "value must be in list [cortex]",
		}
	}

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProviderRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	return nil
}

// CreateProviderRequestValidationError is the validation error returned by
// CreateProviderRequest.Validate if the designated constraints aren't met.
type CreateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProviderRequestValidationError) ErrorName() string {
	return "CreateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProviderRequestValidationError{}

var _CreateProviderRequest_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _CreateProviderRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _CreateProviderRequest_Type_InLookup = map[string]struct{}{
	"cortex": {},
}

// Validate checks the field values on GetProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetProviderRequestValidationError is the validation error returned by
// GetProviderRequest.Validate if the designated constraints aren't met.
type GetProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderRequestValidationError) ErrorName() string {
	return "GetProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderRequestValidationError{}

// Validate checks the field values on UpdateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if uri, err := url.Parse(m.GetHost()); err != nil {
		return UpdateProviderRequestValidationError{
			field:  "Host",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return UpdateProviderRequestValidationError{
			field:  "Host",
			reason: "value must be absolute",
		}
	}

	if !_UpdateProviderRequest_Name_Pattern.MatchString(m.GetName()) {
		return UpdateProviderRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if _, ok := _UpdateProviderRequest_Type_InLookup[m.GetType()]; !ok {
		return UpdateProviderRequestValidationError{
			field:  "Type",
			reason: "value must be in list [cortex]",
		}
	}

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProviderRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	return nil
}

// UpdateProviderRequestValidationError is the validation error returned by
// UpdateProviderRequest.Validate if the designated constraints aren't met.
type UpdateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderRequestValidationError) ErrorName() string {
	return "UpdateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderRequestValidationError{}

var _UpdateProviderRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateProviderRequest_Type_InLookup = map[string]struct{}{
	"cortex": {},
}

// Validate checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteProviderRequestValidationError is the validation error returned by
// DeleteProviderRequest.Validate if the designated constraints aren't met.
type DeleteProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderRequestValidationError) ErrorName() string {
	return "DeleteProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderRequestValidationError{}

// Validate checks the field values on Namespace with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Namespace) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Urn

	// no validation rules for Name

	// no validation rules for Provider

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NamespaceValidationError is the validation error returned by
// Namespace.Validate if the designated constraints aren't met.
type NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceValidationError) ErrorName() string { return "NamespaceValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceValidationError{}

// Validate checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNamespacesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespacesResponseValidationError{
					field:  fmt.Sprintf("Namespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNamespacesResponseValidationError is the validation error returned by
// ListNamespacesResponse.Validate if the designated constraints aren't met.
type ListNamespacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesResponseValidationError) ErrorName() string {
	return "ListNamespacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesResponseValidationError{}

// Validate checks the field values on CreateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateNamespaceRequest_Name_Pattern.MatchString(m.GetName()) {
		return CreateNamespaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_CreateNamespaceRequest_Urn_Pattern.MatchString(m.GetUrn()) {
		return CreateNamespaceRequestValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Provider

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceRequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceRequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNamespaceRequestValidationError is the validation error returned by
// CreateNamespaceRequest.Validate if the designated constraints aren't met.
type CreateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceRequestValidationError) ErrorName() string {
	return "CreateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceRequestValidationError{}

var _CreateNamespaceRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _CreateNamespaceRequest_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetNamespaceRequestValidationError is the validation error returned by
// GetNamespaceRequest.Validate if the designated constraints aren't met.
type GetNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceRequestValidationError) ErrorName() string {
	return "GetNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceRequestValidationError{}

// Validate checks the field values on UpdateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_UpdateNamespaceRequest_Name_Pattern.MatchString(m.GetName()) {
		return UpdateNamespaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Provider

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	return nil
}

// UpdateNamespaceRequestValidationError is the validation error returned by
// UpdateNamespaceRequest.Validate if the designated constraints aren't met.
type UpdateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceRequestValidationError) ErrorName() string {
	return "UpdateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceRequestValidationError{}

var _UpdateNamespaceRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on DeleteNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteNamespaceRequestValidationError is the validation error returned by
// DeleteNamespaceRequest.Validate if the designated constraints aren't met.
type DeleteNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceRequestValidationError) ErrorName() string {
	return "DeleteNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceRequestValidationError{}

// Validate checks the field values on ReceiverMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReceiverMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Configuration

	return nil
}

// ReceiverMetadataValidationError is the validation error returned by
// ReceiverMetadata.Validate if the designated constraints aren't met.
type ReceiverMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiverMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiverMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiverMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiverMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiverMetadataValidationError) ErrorName() string { return "ReceiverMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ReceiverMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiverMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiverMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiverMetadataValidationError{}

// Validate checks the field values on Subscription with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Subscription) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_Subscription_Urn_Pattern.MatchString(m.GetUrn()) {
		return SubscriptionValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Namespace

	for idx, item := range m.GetReceivers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscriptionValidationError{
					field:  fmt.Sprintf("Receivers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Match

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SubscriptionValidationError is the validation error returned by
// Subscription.Validate if the designated constraints aren't met.
type SubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionValidationError) ErrorName() string { return "SubscriptionValidationError" }

// Error satisfies the builtin error interface
func (e SubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionValidationError{}

var _Subscription_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListSubscriptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSubscriptionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSubscriptions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubscriptionsResponseValidationError{
					field:  fmt.Sprintf("Subscriptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSubscriptionsResponseValidationError is the validation error returned by
// ListSubscriptionsResponse.Validate if the designated constraints aren't met.
type ListSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubscriptionsResponseValidationError) ErrorName() string {
	return "ListSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubscriptionsResponseValidationError{}

// Validate checks the field values on CreateSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSubscriptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateSubscriptionRequest_Urn_Pattern.MatchString(m.GetUrn()) {
		return CreateSubscriptionRequestValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Namespace

	for idx, item := range m.GetReceivers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSubscriptionRequestValidationError{
					field:  fmt.Sprintf("Receivers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Match

	return nil
}

// CreateSubscriptionRequestValidationError is the validation error returned by
// CreateSubscriptionRequest.Validate if the designated constraints aren't met.
type CreateSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubscriptionRequestValidationError) ErrorName() string {
	return "CreateSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubscriptionRequestValidationError{}

var _CreateSubscriptionRequest_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on GetSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSubscriptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetSubscriptionRequestValidationError is the validation error returned by
// GetSubscriptionRequest.Validate if the designated constraints aren't met.
type GetSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscriptionRequestValidationError) ErrorName() string {
	return "GetSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscriptionRequestValidationError{}

// Validate checks the field values on UpdateSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSubscriptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_UpdateSubscriptionRequest_Urn_Pattern.MatchString(m.GetUrn()) {
		return UpdateSubscriptionRequestValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Namespace

	for idx, item := range m.GetReceivers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSubscriptionRequestValidationError{
					field:  fmt.Sprintf("Receivers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Match

	return nil
}

// UpdateSubscriptionRequestValidationError is the validation error returned by
// UpdateSubscriptionRequest.Validate if the designated constraints aren't met.
type UpdateSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionRequestValidationError) ErrorName() string {
	return "UpdateSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionRequestValidationError{}

var _UpdateSubscriptionRequest_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on DeleteSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSubscriptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteSubscriptionRequestValidationError is the validation error returned by
// DeleteSubscriptionRequest.Validate if the designated constraints aren't met.
type DeleteSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubscriptionRequestValidationError) ErrorName() string {
	return "DeleteSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubscriptionRequestValidationError{}

// Validate checks the field values on Receiver with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Receiver) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	if _, ok := _Receiver_Type_InLookup[m.GetType()]; !ok {
		return ReceiverValidationError{
			field:  "Type",
			reason: "value must be in list [slack pagerduty http]",
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReceiverValidationError is the validation error returned by
// Receiver.Validate if the designated constraints aren't met.
type ReceiverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiverValidationError) ErrorName() string { return "ReceiverValidationError" }

// Error satisfies the builtin error interface
func (e ReceiverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiverValidationError{}

var _Receiver_Type_InLookup = map[string]struct{}{
	"slack":     {},
	"pagerduty": {},
	"http":      {},
}

// Validate checks the field values on ListReceiversResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListReceiversResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetReceivers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReceiversResponseValidationError{
					field:  fmt.Sprintf("Receivers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListReceiversResponseValidationError is the validation error returned by
// ListReceiversResponse.Validate if the designated constraints aren't met.
type ListReceiversResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReceiversResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReceiversResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReceiversResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReceiversResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReceiversResponseValidationError) ErrorName() string {
	return "ListReceiversResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReceiversResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReceiversResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReceiversResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReceiversResponseValidationError{}

// Validate checks the field values on CreateReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateReceiverRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateReceiverRequest_Name_Pattern.MatchString(m.GetName()) {
		return CreateReceiverRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_.-]+$\"",
		}
	}

	if _, ok := _CreateReceiverRequest_Type_InLookup[m.GetType()]; !ok {
		return CreateReceiverRequestValidationError{
			field:  "Type",
			reason: "value must be in list [slack pagerduty http]",
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReceiverRequestValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateReceiverRequestValidationError is the validation error returned by
// CreateReceiverRequest.Validate if the designated constraints aren't met.
type CreateReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReceiverRequestValidationError) ErrorName() string {
	return "CreateReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReceiverRequestValidationError{}

var _CreateReceiverRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_.-]+$")

var _CreateReceiverRequest_Type_InLookup = map[string]struct{}{
	"slack":     {},
	"pagerduty": {},
	"http":      {},
}

// Validate checks the field values on GetReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReceiverRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetReceiverRequestValidationError is the validation error returned by
// GetReceiverRequest.Validate if the designated constraints aren't met.
type GetReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceiverRequestValidationError) ErrorName() string {
	return "GetReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceiverRequestValidationError{}

// Validate checks the field values on UpdateReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateReceiverRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_UpdateReceiverRequest_Name_Pattern.MatchString(m.GetName()) {
		return UpdateReceiverRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_.-]+$\"",
		}
	}

	if _, ok := _UpdateReceiverRequest_Type_InLookup[m.GetType()]; !ok {
		return UpdateReceiverRequestValidationError{
			field:  "Type",
			reason: "value must be in list [slack pagerduty http]",
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceiverRequestValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateReceiverRequestValidationError is the validation error returned by
// UpdateReceiverRequest.Validate if the designated constraints aren't met.
type UpdateReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceiverRequestValidationError) ErrorName() string {
	return "UpdateReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceiverRequestValidationError{}

var _UpdateReceiverRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_.-]+$")

var _UpdateReceiverRequest_Type_InLookup = map[string]struct{}{
	"slack":     {},
	"pagerduty": {},
	"http":      {},
}

// Validate checks the field values on DeleteReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteReceiverRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteReceiverRequestValidationError is the validation error returned by
// DeleteReceiverRequest.Validate if the designated constraints aren't met.
type DeleteReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReceiverRequestValidationError) ErrorName() string {
	return "DeleteReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReceiverRequestValidationError{}

// Validate checks the field values on SendReceiverNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendReceiverNotificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	switch m.Data.(type) {

	case *SendReceiverNotificationRequest_Slack:

		if v, ok := interface{}(m.GetSlack()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendReceiverNotificationRequestValidationError{
					field:  "Slack",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SendReceiverNotificationRequestValidationError is the validation error
// returned by SendReceiverNotificationRequest.Validate if the designated
// constraints aren't met.
type SendReceiverNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendReceiverNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendReceiverNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendReceiverNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendReceiverNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendReceiverNotificationRequestValidationError) ErrorName() string {
	return "SendReceiverNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendReceiverNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendReceiverNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendReceiverNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendReceiverNotificationRequestValidationError{}

// Validate checks the field values on SendReceiverNotificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SendReceiverNotificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// SendReceiverNotificationResponseValidationError is the validation error
// returned by SendReceiverNotificationResponse.Validate if the designated
// constraints aren't met.
type SendReceiverNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendReceiverNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendReceiverNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendReceiverNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendReceiverNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendReceiverNotificationResponseValidationError) ErrorName() string {
	return "SendReceiverNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendReceiverNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendReceiverNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendReceiverNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendReceiverNotificationResponseValidationError{}

// Validate checks the field values on ListAlertsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListAlertsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ListAlertsRequest_ProviderName_InLookup[m.GetProviderName()]; !ok {
		return ListAlertsRequestValidationError{
			field:  "ProviderName",
			reason: "value must be in list [cortex]",
		}
	}

	// no validation rules for ProviderId

	if !_ListAlertsRequest_ResourceName_Pattern.MatchString(m.GetResourceName()) {
		return ListAlertsRequestValidationError{
			field:  "ResourceName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	return nil
}

// ListAlertsRequestValidationError is the validation error returned by
// ListAlertsRequest.Validate if the designated constraints aren't met.
type ListAlertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertsRequestValidationError) ErrorName() string {
	return "ListAlertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertsRequestValidationError{}

var _ListAlertsRequest_ProviderName_InLookup = map[string]struct{}{
	"cortex": {},
}

var _ListAlertsRequest_ResourceName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Alerts with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Alerts) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlertsValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AlertsValidationError is the validation error returned by Alerts.Validate if
// the designated constraints aren't met.
type AlertsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertsValidationError) ErrorName() string { return "AlertsValidationError" }

// Error satisfies the builtin error interface
func (e AlertsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlerts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertsValidationError{}

// Validate checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Alert) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for ProviderId

	// no validation rules for ResourceName

	// no validation rules for MetricName

	// no validation rules for MetricValue

	// no validation rules for Severity

	// no validation rules for Rule

	if v, ok := interface{}(m.GetTriggeredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertValidationError{
				field:  "TriggeredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AlertValidationError is the validation error returned by Alert.Validate if
// the designated constraints aren't met.
type AlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertValidationError) ErrorName() string { return "AlertValidationError" }

// Error satisfies the builtin error interface
func (e AlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertValidationError{}

// Validate checks the field values on CreateCortexAlertsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCortexAlertsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProviderId

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCortexAlertsRequestValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateCortexAlertsRequestValidationError is the validation error returned by
// CreateCortexAlertsRequest.Validate if the designated constraints aren't met.
type CreateCortexAlertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCortexAlertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCortexAlertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCortexAlertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCortexAlertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCortexAlertsRequestValidationError) ErrorName() string {
	return "CreateCortexAlertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCortexAlertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCortexAlertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCortexAlertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCortexAlertsRequestValidationError{}

// Validate checks the field values on CortexAlert with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CortexAlert) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CortexAlertValidationError{
				field:  "Annotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CortexAlertValidationError{
				field:  "Labels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if v, ok := interface{}(m.GetStartsAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CortexAlertValidationError{
				field:  "StartsAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CortexAlertValidationError is the validation error returned by
// CortexAlert.Validate if the designated constraints aren't met.
type CortexAlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CortexAlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CortexAlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CortexAlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CortexAlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CortexAlertValidationError) ErrorName() string { return "CortexAlertValidationError" }

// Error satisfies the builtin error interface
func (e CortexAlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCortexAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CortexAlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CortexAlertValidationError{}

// Validate checks the field values on Annotations with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Annotations) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricName

	// no validation rules for MetricValue

	// no validation rules for Resource

	// no validation rules for Template

	return nil
}

// AnnotationsValidationError is the validation error returned by
// Annotations.Validate if the designated constraints aren't met.
type AnnotationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnotationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnotationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnotationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnotationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnotationsValidationError) ErrorName() string { return "AnnotationsValidationError" }

// Error satisfies the builtin error interface
func (e AnnotationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnotations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnotationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnotationsValidationError{}

// Validate checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Labels) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Severity

	return nil
}

// LabelsValidationError is the validation error returned by Labels.Validate if
// the designated constraints aren't met.
type LabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsValidationError) ErrorName() string { return "LabelsValidationError" }

// Error satisfies the builtin error interface
func (e LabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Enabled

	// no validation rules for GroupName

	// no validation rules for Namespace

	// no validation rules for Template

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetProviderNamespace() < 0 {
		return RuleValidationError{
			field:  "ProviderNamespace",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on Variables with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Variables) Validate() error {
	if m == nil {
		return nil
	}

	if !_Variables_Name_Pattern.MatchString(m.GetName()) {
		return VariablesValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Value

	// no validation rules for Type

	// no validation rules for Description

	return nil
}

// VariablesValidationError is the validation error returned by
// Variables.Validate if the designated constraints aren't met.
type VariablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariablesValidationError) ErrorName() string { return "VariablesValidationError" }

// Error satisfies the builtin error interface
func (e VariablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariablesValidationError{}

var _Variables_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListRulesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRulesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for GroupName

	// no validation rules for Template

	// no validation rules for ProviderNamespace

	return nil
}

// ListRulesRequestValidationError is the validation error returned by
// ListRulesRequest.Validate if the designated constraints aren't met.
type ListRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesRequestValidationError) ErrorName() string { return "ListRulesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesRequestValidationError{}

// Validate checks the field values on ListRulesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRulesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRulesResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRulesResponseValidationError is the validation error returned by
// ListRulesResponse.Validate if the designated constraints aren't met.
type ListRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesResponseValidationError) ErrorName() string {
	return "ListRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesResponseValidationError{}

// Validate checks the field values on UpdateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRuleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleResponseValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateRuleResponseValidationError is the validation error returned by
// UpdateRuleResponse.Validate if the designated constraints aren't met.
type UpdateRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleResponseValidationError) ErrorName() string {
	return "UpdateRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleResponseValidationError{}

// Validate checks the field values on UpdateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateRuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enabled

	if !_UpdateRuleRequest_GroupName_Pattern.MatchString(m.GetGroupName()) {
		return UpdateRuleRequestValidationError{
			field:  "GroupName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_UpdateRuleRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		return UpdateRuleRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_UpdateRuleRequest_Template_Pattern.MatchString(m.GetTemplate()) {
		return UpdateRuleRequestValidationError{
			field:  "Template",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRuleRequestValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ProviderNamespace

	return nil
}

// UpdateRuleRequestValidationError is the validation error returned by
// UpdateRuleRequest.Validate if the designated constraints aren't met.
type UpdateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleRequestValidationError) ErrorName() string {
	return "UpdateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleRequestValidationError{}

var _UpdateRuleRequest_GroupName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Namespace_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Template_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTemplatesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tag

	return nil
}

// ListTemplatesRequestValidationError is the validation error returned by
// ListTemplatesRequest.Validate if the designated constraints aren't met.
type ListTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesRequestValidationError) ErrorName() string {
	return "ListTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesRequestValidationError{}

// Validate checks the field values on TemplateVariables with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TemplateVariables) Validate() error {
	if m == nil {
		return nil
	}

	if !_TemplateVariables_Name_Pattern.MatchString(m.GetName()) {
		return TemplateVariablesValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_TemplateVariables_Type_Pattern.MatchString(m.GetType()) {
		return TemplateVariablesValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Default

	// no validation rules for Description

	return nil
}

// TemplateVariablesValidationError is the validation error returned by
// TemplateVariables.Validate if the designated constraints aren't met.
type TemplateVariablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateVariablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateVariablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateVariablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateVariablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateVariablesValidationError) ErrorName() string {
	return "TemplateVariablesValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateVariablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateVariables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateVariablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateVariablesValidationError{}

var _TemplateVariables_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _TemplateVariables_Type_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Template with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Template) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_Template_Name_Pattern.MatchString(m.GetName()) {
		return TemplateValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_Template_Body_Pattern.MatchString(m.GetBody()) {
		return TemplateValidationError{
			field:  "Body",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if len(m.GetTags()) < 1 {
		return TemplateValidationError{
			field:  "Tags",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetVariables()) < 1 {
		return TemplateValidationError{
			field:  "Variables",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TemplateValidationError is the validation error returned by
// Template.Validate if the designated constraints aren't met.
type TemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateValidationError) ErrorName() string { return "TemplateValidationError" }

// Error satisfies the builtin error interface
func (e TemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateValidationError{}

var _Template_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _Template_Body_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on TemplateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TemplateResponseValidationError is the validation error returned by
// TemplateResponse.Validate if the designated constraints aren't met.
type TemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateResponseValidationError) ErrorName() string { return "TemplateResponseValidationError" }

// Error satisfies the builtin error interface
func (e TemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateResponseValidationError{}

// Validate checks the field values on UpsertTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_UpsertTemplateRequest_Name_Pattern.MatchString(m.GetName()) {
		return UpsertTemplateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Body

	if len(m.GetTags()) < 1 {
		return UpsertTemplateRequestValidationError{
			field:  "Tags",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if len(m.GetVariables()) < 1 {
		return UpsertTemplateRequestValidationError{
			field:  "Variables",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertTemplateRequestValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertTemplateRequestValidationError is the validation error returned by
// UpsertTemplateRequest.Validate if the designated constraints aren't met.
type UpsertTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertTemplateRequestValidationError) ErrorName() string {
	return "UpsertTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertTemplateRequestValidationError{}

var _UpsertTemplateRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTemplatesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTemplatesResponseValidationError is the validation error returned by
// ListTemplatesResponse.Validate if the designated constraints aren't met.
type ListTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesResponseValidationError) ErrorName() string {
	return "ListTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesResponseValidationError{}

// Validate checks the field values on GetTemplateByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTemplateByNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetTemplateByNameRequest_Name_Pattern.MatchString(m.GetName()) {
		return GetTemplateByNameRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	return nil
}

// GetTemplateByNameRequestValidationError is the validation error returned by
// GetTemplateByNameRequest.Validate if the designated constraints aren't met.
type GetTemplateByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateByNameRequestValidationError) ErrorName() string {
	return "GetTemplateByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateByNameRequestValidationError{}

var _GetTemplateByNameRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteTemplateResponseValidationError is the validation error returned by
// DeleteTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateResponseValidationError) ErrorName() string {
	return "DeleteTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateResponseValidationError{}

// Validate checks the field values on RenderTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RenderTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RenderTemplateRequest_Name_Pattern.MatchString(m.GetName()) {
		return RenderTemplateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Variables

	return nil
}

// RenderTemplateRequestValidationError is the validation error returned by
// RenderTemplateRequest.Validate if the designated constraints aren't met.
type RenderTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderTemplateRequestValidationError) ErrorName() string {
	return "RenderTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderTemplateRequestValidationError{}

var _RenderTemplateRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on RenderTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RenderTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Body

	return nil
}

// RenderTemplateResponseValidationError is the validation error returned by
// RenderTemplateResponse.Validate if the designated constraints aren't met.
type RenderTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderTemplateResponseValidationError) ErrorName() string {
	return "RenderTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderTemplateResponseValidationError{}

// Validate checks the field values on
// SendReceiverNotificationRequest_SlackPayload with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SendReceiverNotificationRequest_SlackPayload) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	if !_SendReceiverNotificationRequest_SlackPayload_ReceiverName_Pattern.MatchString(m.GetReceiverName()) {
		return SendReceiverNotificationRequest_SlackPayloadValidationError{
			field:  "ReceiverName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if _, ok := _SendReceiverNotificationRequest_SlackPayload_ReceiverType_InLookup[m.GetReceiverType()]; !ok {
		return SendReceiverNotificationRequest_SlackPayloadValidationError{
			field:  "ReceiverType",
			reason: "value must be in list [channel user]",
		}
	}

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendReceiverNotificationRequest_SlackPayloadValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SendReceiverNotificationRequest_SlackPayloadValidationError is the
// validation error returned by
// SendReceiverNotificationRequest_SlackPayload.Validate if the designated
// constraints aren't met.
type SendReceiverNotificationRequest_SlackPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendReceiverNotificationRequest_SlackPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendReceiverNotificationRequest_SlackPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendReceiverNotificationRequest_SlackPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendReceiverNotificationRequest_SlackPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendReceiverNotificationRequest_SlackPayloadValidationError) ErrorName() string {
	return "SendReceiverNotificationRequest_SlackPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e SendReceiverNotificationRequest_SlackPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendReceiverNotificationRequest_SlackPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendReceiverNotificationRequest_SlackPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendReceiverNotificationRequest_SlackPayloadValidationError{}

var _SendReceiverNotificationRequest_SlackPayload_ReceiverName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _SendReceiverNotificationRequest_SlackPayload_ReceiverType_InLookup = map[string]struct{}{
	"channel": {},
	"user":    {},
}
