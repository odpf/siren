// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sirenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SirenServiceClient is the client API for SirenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SirenServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ListAlertHistory(ctx context.Context, in *ListAlertHistoryRequest, opts ...grpc.CallOption) (*ListAlertHistoryResponse, error)
	CreateAlertHistory(ctx context.Context, in *CreateAlertHistoryRequest, opts ...grpc.CallOption) (*CreateAlertHistoryResponse, error)
	ListWorkspaceChannels(ctx context.Context, in *ListWorkspaceChannelsRequest, opts ...grpc.CallOption) (*ListWorkspaceChannelsResponse, error)
	ExchangeCode(ctx context.Context, in *ExchangeCodeRequest, opts ...grpc.CallOption) (*ExchangeCodeResponse, error)
	GetAlertCredentials(ctx context.Context, in *GetAlertCredentialsRequest, opts ...grpc.CallOption) (*GetAlertCredentialsResponse, error)
	UpdateAlertCredentials(ctx context.Context, in *UpdateAlertCredentialsRequest, opts ...grpc.CallOption) (*UpdateAlertCredentialsResponse, error)
	SendSlackNotification(ctx context.Context, in *SendSlackNotificationRequest, opts ...grpc.CallOption) (*SendSlackNotificationResponse, error)
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error)
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	GetTemplateByName(ctx context.Context, in *GetTemplateByNameRequest, opts ...grpc.CallOption) (*TemplateResponse, error)
	UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
	RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error)
}

type sirenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSirenServiceClient(cc grpc.ClientConnInterface) SirenServiceClient {
	return &sirenServiceClient{cc}
}

func (c *sirenServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListAlertHistory(ctx context.Context, in *ListAlertHistoryRequest, opts ...grpc.CallOption) (*ListAlertHistoryResponse, error) {
	out := new(ListAlertHistoryResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/ListAlertHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) CreateAlertHistory(ctx context.Context, in *CreateAlertHistoryRequest, opts ...grpc.CallOption) (*CreateAlertHistoryResponse, error) {
	out := new(CreateAlertHistoryResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/CreateAlertHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListWorkspaceChannels(ctx context.Context, in *ListWorkspaceChannelsRequest, opts ...grpc.CallOption) (*ListWorkspaceChannelsResponse, error) {
	out := new(ListWorkspaceChannelsResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/ListWorkspaceChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ExchangeCode(ctx context.Context, in *ExchangeCodeRequest, opts ...grpc.CallOption) (*ExchangeCodeResponse, error) {
	out := new(ExchangeCodeResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/ExchangeCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) GetAlertCredentials(ctx context.Context, in *GetAlertCredentialsRequest, opts ...grpc.CallOption) (*GetAlertCredentialsResponse, error) {
	out := new(GetAlertCredentialsResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/GetAlertCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) UpdateAlertCredentials(ctx context.Context, in *UpdateAlertCredentialsRequest, opts ...grpc.CallOption) (*UpdateAlertCredentialsResponse, error) {
	out := new(UpdateAlertCredentialsResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/UpdateAlertCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) SendSlackNotification(ctx context.Context, in *SendSlackNotificationRequest, opts ...grpc.CallOption) (*SendSlackNotificationResponse, error) {
	out := new(SendSlackNotificationResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/SendSlackNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error) {
	out := new(UpdateRuleResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) GetTemplateByName(ctx context.Context, in *GetTemplateByNameRequest, opts ...grpc.CallOption) (*TemplateResponse, error) {
	out := new(TemplateResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/GetTemplateByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error) {
	out := new(TemplateResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/UpsertTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error) {
	out := new(RenderTemplateResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1.SirenService/RenderTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SirenServiceServer is the server API for SirenService service.
// All implementations must embed UnimplementedSirenServiceServer
// for forward compatibility
type SirenServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ListAlertHistory(context.Context, *ListAlertHistoryRequest) (*ListAlertHistoryResponse, error)
	CreateAlertHistory(context.Context, *CreateAlertHistoryRequest) (*CreateAlertHistoryResponse, error)
	ListWorkspaceChannels(context.Context, *ListWorkspaceChannelsRequest) (*ListWorkspaceChannelsResponse, error)
	ExchangeCode(context.Context, *ExchangeCodeRequest) (*ExchangeCodeResponse, error)
	GetAlertCredentials(context.Context, *GetAlertCredentialsRequest) (*GetAlertCredentialsResponse, error)
	UpdateAlertCredentials(context.Context, *UpdateAlertCredentialsRequest) (*UpdateAlertCredentialsResponse, error)
	SendSlackNotification(context.Context, *SendSlackNotificationRequest) (*SendSlackNotificationResponse, error)
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error)
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	GetTemplateByName(context.Context, *GetTemplateByNameRequest) (*TemplateResponse, error)
	UpsertTemplate(context.Context, *UpsertTemplateRequest) (*TemplateResponse, error)
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error)
	mustEmbedUnimplementedSirenServiceServer()
}

// UnimplementedSirenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSirenServiceServer struct {
}

func (UnimplementedSirenServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSirenServiceServer) ListAlertHistory(context.Context, *ListAlertHistoryRequest) (*ListAlertHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertHistory not implemented")
}
func (UnimplementedSirenServiceServer) CreateAlertHistory(context.Context, *CreateAlertHistoryRequest) (*CreateAlertHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertHistory not implemented")
}
func (UnimplementedSirenServiceServer) ListWorkspaceChannels(context.Context, *ListWorkspaceChannelsRequest) (*ListWorkspaceChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaceChannels not implemented")
}
func (UnimplementedSirenServiceServer) ExchangeCode(context.Context, *ExchangeCodeRequest) (*ExchangeCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCode not implemented")
}
func (UnimplementedSirenServiceServer) GetAlertCredentials(context.Context, *GetAlertCredentialsRequest) (*GetAlertCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertCredentials not implemented")
}
func (UnimplementedSirenServiceServer) UpdateAlertCredentials(context.Context, *UpdateAlertCredentialsRequest) (*UpdateAlertCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertCredentials not implemented")
}
func (UnimplementedSirenServiceServer) SendSlackNotification(context.Context, *SendSlackNotificationRequest) (*SendSlackNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSlackNotification not implemented")
}
func (UnimplementedSirenServiceServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (UnimplementedSirenServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedSirenServiceServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedSirenServiceServer) GetTemplateByName(context.Context, *GetTemplateByNameRequest) (*TemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateByName not implemented")
}
func (UnimplementedSirenServiceServer) UpsertTemplate(context.Context, *UpsertTemplateRequest) (*TemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTemplate not implemented")
}
func (UnimplementedSirenServiceServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedSirenServiceServer) RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderTemplate not implemented")
}
func (UnimplementedSirenServiceServer) mustEmbedUnimplementedSirenServiceServer() {}

// UnsafeSirenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SirenServiceServer will
// result in compilation errors.
type UnsafeSirenServiceServer interface {
	mustEmbedUnimplementedSirenServiceServer()
}

func RegisterSirenServiceServer(s grpc.ServiceRegistrar, srv SirenServiceServer) {
	s.RegisterService(&SirenService_ServiceDesc, srv)
}

func _SirenService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListAlertHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListAlertHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/ListAlertHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListAlertHistory(ctx, req.(*ListAlertHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_CreateAlertHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).CreateAlertHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/CreateAlertHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).CreateAlertHistory(ctx, req.(*CreateAlertHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListWorkspaceChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspaceChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListWorkspaceChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/ListWorkspaceChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListWorkspaceChannels(ctx, req.(*ListWorkspaceChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ExchangeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ExchangeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/ExchangeCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ExchangeCode(ctx, req.(*ExchangeCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_GetAlertCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).GetAlertCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/GetAlertCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).GetAlertCredentials(ctx, req.(*GetAlertCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_UpdateAlertCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).UpdateAlertCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/UpdateAlertCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).UpdateAlertCredentials(ctx, req.(*UpdateAlertCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_SendSlackNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSlackNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).SendSlackNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/SendSlackNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).SendSlackNotification(ctx, req.(*SendSlackNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_GetTemplateByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).GetTemplateByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/GetTemplateByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).GetTemplateByName(ctx, req.(*GetTemplateByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_UpsertTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).UpsertTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/UpsertTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).UpsertTemplate(ctx, req.(*UpsertTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_RenderTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).RenderTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1.SirenService/RenderTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).RenderTemplate(ctx, req.(*RenderTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SirenService_ServiceDesc is the grpc.ServiceDesc for SirenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SirenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.siren.v1.SirenService",
	HandlerType: (*SirenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SirenService_Ping_Handler,
		},
		{
			MethodName: "ListAlertHistory",
			Handler:    _SirenService_ListAlertHistory_Handler,
		},
		{
			MethodName: "CreateAlertHistory",
			Handler:    _SirenService_CreateAlertHistory_Handler,
		},
		{
			MethodName: "ListWorkspaceChannels",
			Handler:    _SirenService_ListWorkspaceChannels_Handler,
		},
		{
			MethodName: "ExchangeCode",
			Handler:    _SirenService_ExchangeCode_Handler,
		},
		{
			MethodName: "GetAlertCredentials",
			Handler:    _SirenService_GetAlertCredentials_Handler,
		},
		{
			MethodName: "UpdateAlertCredentials",
			Handler:    _SirenService_UpdateAlertCredentials_Handler,
		},
		{
			MethodName: "SendSlackNotification",
			Handler:    _SirenService_SendSlackNotification_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _SirenService_ListRules_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _SirenService_UpdateRule_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _SirenService_ListTemplates_Handler,
		},
		{
			MethodName: "GetTemplateByName",
			Handler:    _SirenService_GetTemplateByName_Handler,
		},
		{
			MethodName: "UpsertTemplate",
			Handler:    _SirenService_UpsertTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _SirenService_DeleteTemplate_Handler,
		},
		{
			MethodName: "RenderTemplate",
			Handler:    _SirenService_RenderTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/siren/v1/siren.proto",
}
