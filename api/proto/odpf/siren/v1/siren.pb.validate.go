// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: odpf/siren/v1/siren.proto

package sirenv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PingRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PingResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Provider) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Host

	// no validation rules for Name

	if _, ok := _Provider_Type_InLookup[m.GetType()]; !ok {
		return ProviderValidationError{
			field:  "Type",
			reason: "value must be in list [cortex]",
		}
	}

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

var _Provider_Type_InLookup = map[string]struct{}{
	"cortex": {},
}

// Validate checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProvidersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProvidersResponseValidationError is the validation error returned by
// ListProvidersResponse.Validate if the designated constraints aren't met.
type ListProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponseValidationError) ErrorName() string {
	return "ListProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponseValidationError{}

// Validate checks the field values on CreateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateProviderRequest_Host_Pattern.MatchString(m.GetHost()) {
		return CreateProviderRequestValidationError{
			field:  "Host",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_.-]+$\"",
		}
	}

	if !_CreateProviderRequest_Name_Pattern.MatchString(m.GetName()) {
		return CreateProviderRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if _, ok := _CreateProviderRequest_Type_InLookup[m.GetType()]; !ok {
		return CreateProviderRequestValidationError{
			field:  "Type",
			reason: "value must be in list [cortex]",
		}
	}

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProviderRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	return nil
}

// CreateProviderRequestValidationError is the validation error returned by
// CreateProviderRequest.Validate if the designated constraints aren't met.
type CreateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProviderRequestValidationError) ErrorName() string {
	return "CreateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProviderRequestValidationError{}

var _CreateProviderRequest_Host_Pattern = regexp.MustCompile("^[A-Za-z0-9_.-]+$")

var _CreateProviderRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _CreateProviderRequest_Type_InLookup = map[string]struct{}{
	"cortex": {},
}

// Validate checks the field values on GetProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetProviderRequestValidationError is the validation error returned by
// GetProviderRequest.Validate if the designated constraints aren't met.
type GetProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderRequestValidationError) ErrorName() string {
	return "GetProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderRequestValidationError{}

// Validate checks the field values on UpdateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_UpdateProviderRequest_Host_Pattern.MatchString(m.GetHost()) {
		return UpdateProviderRequestValidationError{
			field:  "Host",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_.-]+$\"",
		}
	}

	if !_UpdateProviderRequest_Name_Pattern.MatchString(m.GetName()) {
		return UpdateProviderRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if _, ok := _UpdateProviderRequest_Type_InLookup[m.GetType()]; !ok {
		return UpdateProviderRequestValidationError{
			field:  "Type",
			reason: "value must be in list [cortex]",
		}
	}

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProviderRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	return nil
}

// UpdateProviderRequestValidationError is the validation error returned by
// UpdateProviderRequest.Validate if the designated constraints aren't met.
type UpdateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderRequestValidationError) ErrorName() string {
	return "UpdateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderRequestValidationError{}

var _UpdateProviderRequest_Host_Pattern = regexp.MustCompile("^[A-Za-z0-9_.-]+$")

var _UpdateProviderRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateProviderRequest_Type_InLookup = map[string]struct{}{
	"cortex": {},
}

// Validate checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteProviderRequestValidationError is the validation error returned by
// DeleteProviderRequest.Validate if the designated constraints aren't met.
type DeleteProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderRequestValidationError) ErrorName() string {
	return "DeleteProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderRequestValidationError{}

// Validate checks the field values on Namespace with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Namespace) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Provider

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NamespaceValidationError is the validation error returned by
// Namespace.Validate if the designated constraints aren't met.
type NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceValidationError) ErrorName() string { return "NamespaceValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceValidationError{}

// Validate checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNamespacesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespacesResponseValidationError{
					field:  fmt.Sprintf("Namespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNamespacesResponseValidationError is the validation error returned by
// ListNamespacesResponse.Validate if the designated constraints aren't met.
type ListNamespacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesResponseValidationError) ErrorName() string {
	return "ListNamespacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesResponseValidationError{}

// Validate checks the field values on CreateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateNamespaceRequest_Name_Pattern.MatchString(m.GetName()) {
		return CreateNamespaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Provider

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceRequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceRequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNamespaceRequestValidationError is the validation error returned by
// CreateNamespaceRequest.Validate if the designated constraints aren't met.
type CreateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceRequestValidationError) ErrorName() string {
	return "CreateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceRequestValidationError{}

var _CreateNamespaceRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetNamespaceRequestValidationError is the validation error returned by
// GetNamespaceRequest.Validate if the designated constraints aren't met.
type GetNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceRequestValidationError) ErrorName() string {
	return "GetNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceRequestValidationError{}

// Validate checks the field values on UpdateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_UpdateNamespaceRequest_Name_Pattern.MatchString(m.GetName()) {
		return UpdateNamespaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Provider

	if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	return nil
}

// UpdateNamespaceRequestValidationError is the validation error returned by
// UpdateNamespaceRequest.Validate if the designated constraints aren't met.
type UpdateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceRequestValidationError) ErrorName() string {
	return "UpdateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceRequestValidationError{}

var _UpdateNamespaceRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on DeleteNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteNamespaceRequestValidationError is the validation error returned by
// DeleteNamespaceRequest.Validate if the designated constraints aren't met.
type DeleteNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceRequestValidationError) ErrorName() string {
	return "DeleteNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceRequestValidationError{}

// Validate checks the field values on Receiver with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Receiver) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	if _, ok := _Receiver_Type_InLookup[m.GetType()]; !ok {
		return ReceiverValidationError{
			field:  "Type",
			reason: "value must be in list [slack pagerduty http]",
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReceiverValidationError is the validation error returned by
// Receiver.Validate if the designated constraints aren't met.
type ReceiverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiverValidationError) ErrorName() string { return "ReceiverValidationError" }

// Error satisfies the builtin error interface
func (e ReceiverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiverValidationError{}

var _Receiver_Type_InLookup = map[string]struct{}{
	"slack":     {},
	"pagerduty": {},
	"http":      {},
}

// Validate checks the field values on ListReceiversResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListReceiversResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetReceivers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReceiversResponseValidationError{
					field:  fmt.Sprintf("Receivers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListReceiversResponseValidationError is the validation error returned by
// ListReceiversResponse.Validate if the designated constraints aren't met.
type ListReceiversResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReceiversResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReceiversResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReceiversResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReceiversResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReceiversResponseValidationError) ErrorName() string {
	return "ListReceiversResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReceiversResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReceiversResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReceiversResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReceiversResponseValidationError{}

// Validate checks the field values on CreateReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateReceiverRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateReceiverRequest_Name_Pattern.MatchString(m.GetName()) {
		return CreateReceiverRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_.-]+$\"",
		}
	}

	if _, ok := _CreateReceiverRequest_Type_InLookup[m.GetType()]; !ok {
		return CreateReceiverRequestValidationError{
			field:  "Type",
			reason: "value must be in list [slack pagerduty http]",
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReceiverRequestValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateReceiverRequestValidationError is the validation error returned by
// CreateReceiverRequest.Validate if the designated constraints aren't met.
type CreateReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReceiverRequestValidationError) ErrorName() string {
	return "CreateReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReceiverRequestValidationError{}

var _CreateReceiverRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_.-]+$")

var _CreateReceiverRequest_Type_InLookup = map[string]struct{}{
	"slack":     {},
	"pagerduty": {},
	"http":      {},
}

// Validate checks the field values on GetReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReceiverRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetReceiverRequestValidationError is the validation error returned by
// GetReceiverRequest.Validate if the designated constraints aren't met.
type GetReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceiverRequestValidationError) ErrorName() string {
	return "GetReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceiverRequestValidationError{}

// Validate checks the field values on UpdateReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateReceiverRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_UpdateReceiverRequest_Name_Pattern.MatchString(m.GetName()) {
		return UpdateReceiverRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_.-]+$\"",
		}
	}

	if _, ok := _UpdateReceiverRequest_Type_InLookup[m.GetType()]; !ok {
		return UpdateReceiverRequestValidationError{
			field:  "Type",
			reason: "value must be in list [slack pagerduty http]",
		}
	}

	// no validation rules for Labels

	if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceiverRequestValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateReceiverRequestValidationError is the validation error returned by
// UpdateReceiverRequest.Validate if the designated constraints aren't met.
type UpdateReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceiverRequestValidationError) ErrorName() string {
	return "UpdateReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceiverRequestValidationError{}

var _UpdateReceiverRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_.-]+$")

var _UpdateReceiverRequest_Type_InLookup = map[string]struct{}{
	"slack":     {},
	"pagerduty": {},
	"http":      {},
}

// Validate checks the field values on DeleteReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteReceiverRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteReceiverRequestValidationError is the validation error returned by
// DeleteReceiverRequest.Validate if the designated constraints aren't met.
type DeleteReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReceiverRequestValidationError) ErrorName() string {
	return "DeleteReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReceiverRequestValidationError{}

// Validate checks the field values on ListAlertHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAlertHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Resource

	// no validation rules for StartTime

	// no validation rules for EndTime

	return nil
}

// ListAlertHistoryRequestValidationError is the validation error returned by
// ListAlertHistoryRequest.Validate if the designated constraints aren't met.
type ListAlertHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertHistoryRequestValidationError) ErrorName() string {
	return "ListAlertHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertHistoryRequestValidationError{}

// Validate checks the field values on ListAlertHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAlertHistoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAlertHistoryResponseValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAlertHistoryResponseValidationError is the validation error returned by
// ListAlertHistoryResponse.Validate if the designated constraints aren't met.
type ListAlertHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertHistoryResponseValidationError) ErrorName() string {
	return "ListAlertHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertHistoryResponseValidationError{}

// Validate checks the field values on AlertHistory with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AlertHistory) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for TemplateId

	// no validation rules for MetricName

	// no validation rules for MetricValue

	// no validation rules for Level

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	return nil
}

// AlertHistoryValidationError is the validation error returned by
// AlertHistory.Validate if the designated constraints aren't met.
type AlertHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertHistoryValidationError) ErrorName() string { return "AlertHistoryValidationError" }

// Error satisfies the builtin error interface
func (e AlertHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertHistoryValidationError{}

// Validate checks the field values on Annotations with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Annotations) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricName

	// no validation rules for MetricValue

	// no validation rules for Resource

	// no validation rules for Template

	return nil
}

// AnnotationsValidationError is the validation error returned by
// Annotations.Validate if the designated constraints aren't met.
type AnnotationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnotationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnotationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnotationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnotationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnotationsValidationError) ErrorName() string { return "AnnotationsValidationError" }

// Error satisfies the builtin error interface
func (e AnnotationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnotations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnotationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnotationsValidationError{}

// Validate checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Labels) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Severity

	return nil
}

// LabelsValidationError is the validation error returned by Labels.Validate if
// the designated constraints aren't met.
type LabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsValidationError) ErrorName() string { return "LabelsValidationError" }

// Error satisfies the builtin error interface
func (e LabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsValidationError{}

// Validate checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Alert) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertValidationError{
				field:  "Annotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertValidationError{
				field:  "Labels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	return nil
}

// AlertValidationError is the validation error returned by Alert.Validate if
// the designated constraints aren't met.
type AlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertValidationError) ErrorName() string { return "AlertValidationError" }

// Error satisfies the builtin error interface
func (e AlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertValidationError{}

// Validate checks the field values on CreateAlertHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAlertHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertHistoryRequestValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateAlertHistoryRequestValidationError is the validation error returned by
// CreateAlertHistoryRequest.Validate if the designated constraints aren't met.
type CreateAlertHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertHistoryRequestValidationError) ErrorName() string {
	return "CreateAlertHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertHistoryRequestValidationError{}

// Validate checks the field values on CreateAlertHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAlertHistoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertHistoryResponseValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateAlertHistoryResponseValidationError is the validation error returned
// by CreateAlertHistoryResponse.Validate if the designated constraints aren't met.
type CreateAlertHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertHistoryResponseValidationError) ErrorName() string {
	return "CreateAlertHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertHistoryResponseValidationError{}

// Validate checks the field values on SlackWorkspace with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SlackWorkspace) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// SlackWorkspaceValidationError is the validation error returned by
// SlackWorkspace.Validate if the designated constraints aren't met.
type SlackWorkspaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlackWorkspaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlackWorkspaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlackWorkspaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlackWorkspaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlackWorkspaceValidationError) ErrorName() string { return "SlackWorkspaceValidationError" }

// Error satisfies the builtin error interface
func (e SlackWorkspaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlackWorkspace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlackWorkspaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlackWorkspaceValidationError{}

// Validate checks the field values on ListWorkspaceChannelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWorkspaceChannelsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListWorkspaceChannelsRequest_WorkspaceName_Pattern.MatchString(m.GetWorkspaceName()) {
		return ListWorkspaceChannelsRequestValidationError{
			field:  "WorkspaceName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	return nil
}

// ListWorkspaceChannelsRequestValidationError is the validation error returned
// by ListWorkspaceChannelsRequest.Validate if the designated constraints
// aren't met.
type ListWorkspaceChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspaceChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspaceChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspaceChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspaceChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspaceChannelsRequestValidationError) ErrorName() string {
	return "ListWorkspaceChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspaceChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspaceChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspaceChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspaceChannelsRequestValidationError{}

var _ListWorkspaceChannelsRequest_WorkspaceName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListWorkspaceChannelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWorkspaceChannelsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkspaceChannelsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWorkspaceChannelsResponseValidationError is the validation error
// returned by ListWorkspaceChannelsResponse.Validate if the designated
// constraints aren't met.
type ListWorkspaceChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspaceChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspaceChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspaceChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspaceChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspaceChannelsResponseValidationError) ErrorName() string {
	return "ListWorkspaceChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspaceChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspaceChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspaceChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspaceChannelsResponseValidationError{}

// Validate checks the field values on ExchangeCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExchangeCodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ExchangeCodeRequest_Code_Pattern.MatchString(m.GetCode()) {
		return ExchangeCodeRequestValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[A-Za-z0-9._-]+$\"",
		}
	}

	if !_ExchangeCodeRequest_Workspace_Pattern.MatchString(m.GetWorkspace()) {
		return ExchangeCodeRequestValidationError{
			field:  "Workspace",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	return nil
}

// ExchangeCodeRequestValidationError is the validation error returned by
// ExchangeCodeRequest.Validate if the designated constraints aren't met.
type ExchangeCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeCodeRequestValidationError) ErrorName() string {
	return "ExchangeCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeCodeRequestValidationError{}

var _ExchangeCodeRequest_Code_Pattern = regexp.MustCompile("^[A-Za-z0-9._-]+$")

var _ExchangeCodeRequest_Workspace_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ExchangeCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExchangeCodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// ExchangeCodeResponseValidationError is the validation error returned by
// ExchangeCodeResponse.Validate if the designated constraints aren't met.
type ExchangeCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeCodeResponseValidationError) ErrorName() string {
	return "ExchangeCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeCodeResponseValidationError{}

// Validate checks the field values on GetAlertCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAlertCredentialsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetAlertCredentialsRequest_TeamName_Pattern.MatchString(m.GetTeamName()) {
		return GetAlertCredentialsRequestValidationError{
			field:  "TeamName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	return nil
}

// GetAlertCredentialsRequestValidationError is the validation error returned
// by GetAlertCredentialsRequest.Validate if the designated constraints aren't met.
type GetAlertCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertCredentialsRequestValidationError) ErrorName() string {
	return "GetAlertCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertCredentialsRequestValidationError{}

var _GetAlertCredentialsRequest_TeamName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Critical with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Critical) Validate() error {
	if m == nil {
		return nil
	}

	if !_Critical_Channel_Pattern.MatchString(m.GetChannel()) {
		return CriticalValidationError{
			field:  "Channel",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	return nil
}

// CriticalValidationError is the validation error returned by
// Critical.Validate if the designated constraints aren't met.
type CriticalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalValidationError) ErrorName() string { return "CriticalValidationError" }

// Error satisfies the builtin error interface
func (e CriticalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCritical.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalValidationError{}

var _Critical_Channel_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Warning with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Warning) Validate() error {
	if m == nil {
		return nil
	}

	if !_Warning_Channel_Pattern.MatchString(m.GetChannel()) {
		return WarningValidationError{
			field:  "Channel",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	return nil
}

// WarningValidationError is the validation error returned by Warning.Validate
// if the designated constraints aren't met.
type WarningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarningValidationError) ErrorName() string { return "WarningValidationError" }

// Error satisfies the builtin error interface
func (e WarningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarningValidationError{}

var _Warning_Channel_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on SlackConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SlackConfig) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCritical() == nil {
		return SlackConfigValidationError{
			field:  "Critical",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCritical()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SlackConfigValidationError{
				field:  "Critical",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetWarning() == nil {
		return SlackConfigValidationError{
			field:  "Warning",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetWarning()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SlackConfigValidationError{
				field:  "Warning",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SlackConfigValidationError is the validation error returned by
// SlackConfig.Validate if the designated constraints aren't met.
type SlackConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlackConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlackConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlackConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlackConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlackConfigValidationError) ErrorName() string { return "SlackConfigValidationError" }

// Error satisfies the builtin error interface
func (e SlackConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlackConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlackConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlackConfigValidationError{}

// Validate checks the field values on GetAlertCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAlertCredentialsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Entity

	// no validation rules for TeamName

	// no validation rules for PagerdutyCredentials

	if v, ok := interface{}(m.GetSlackConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertCredentialsResponseValidationError{
				field:  "SlackConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAlertCredentialsResponseValidationError is the validation error returned
// by GetAlertCredentialsResponse.Validate if the designated constraints
// aren't met.
type GetAlertCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertCredentialsResponseValidationError) ErrorName() string {
	return "GetAlertCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertCredentialsResponseValidationError{}

// Validate checks the field values on UpdateAlertCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAlertCredentialsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateAlertCredentialsRequest_Entity_Pattern.MatchString(m.GetEntity()) {
		return UpdateAlertCredentialsRequestValidationError{
			field:  "Entity",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for TeamName

	if !_UpdateAlertCredentialsRequest_PagerdutyCredentials_Pattern.MatchString(m.GetPagerdutyCredentials()) {
		return UpdateAlertCredentialsRequestValidationError{
			field:  "PagerdutyCredentials",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if m.GetSlackConfig() == nil {
		return UpdateAlertCredentialsRequestValidationError{
			field:  "SlackConfig",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSlackConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlertCredentialsRequestValidationError{
				field:  "SlackConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAlertCredentialsRequestValidationError is the validation error
// returned by UpdateAlertCredentialsRequest.Validate if the designated
// constraints aren't met.
type UpdateAlertCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertCredentialsRequestValidationError) ErrorName() string {
	return "UpdateAlertCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertCredentialsRequestValidationError{}

var _UpdateAlertCredentialsRequest_Entity_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateAlertCredentialsRequest_PagerdutyCredentials_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on UpdateAlertCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAlertCredentialsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateAlertCredentialsResponseValidationError is the validation error
// returned by UpdateAlertCredentialsResponse.Validate if the designated
// constraints aren't met.
type UpdateAlertCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertCredentialsResponseValidationError) ErrorName() string {
	return "UpdateAlertCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertCredentialsResponseValidationError{}

// Validate checks the field values on SendSlackNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendSlackNotificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Provider

	if !_SendSlackNotificationRequest_Entity_Pattern.MatchString(m.GetEntity()) {
		return SendSlackNotificationRequestValidationError{
			field:  "Entity",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Message

	if !_SendSlackNotificationRequest_ReceiverName_Pattern.MatchString(m.GetReceiverName()) {
		return SendSlackNotificationRequestValidationError{
			field:  "ReceiverName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if _, ok := _SendSlackNotificationRequest_ReceiverType_InLookup[m.GetReceiverType()]; !ok {
		return SendSlackNotificationRequestValidationError{
			field:  "ReceiverType",
			reason: "value must be in list [channel user]",
		}
	}

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendSlackNotificationRequestValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SendSlackNotificationRequestValidationError is the validation error returned
// by SendSlackNotificationRequest.Validate if the designated constraints
// aren't met.
type SendSlackNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSlackNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSlackNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSlackNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSlackNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSlackNotificationRequestValidationError) ErrorName() string {
	return "SendSlackNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendSlackNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSlackNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSlackNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSlackNotificationRequestValidationError{}

var _SendSlackNotificationRequest_Entity_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _SendSlackNotificationRequest_ReceiverName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _SendSlackNotificationRequest_ReceiverType_InLookup = map[string]struct{}{
	"channel": {},
	"user":    {},
}

// Validate checks the field values on SendSlackNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendSlackNotificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// SendSlackNotificationResponseValidationError is the validation error
// returned by SendSlackNotificationResponse.Validate if the designated
// constraints aren't met.
type SendSlackNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSlackNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSlackNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSlackNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSlackNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSlackNotificationResponseValidationError) ErrorName() string {
	return "SendSlackNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendSlackNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSlackNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSlackNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSlackNotificationResponseValidationError{}

// Validate checks the field values on ListRulesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRulesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Namespace

	// no validation rules for Entity

	// no validation rules for GroupName

	// no validation rules for Status

	// no validation rules for Template

	return nil
}

// ListRulesRequestValidationError is the validation error returned by
// ListRulesRequest.Validate if the designated constraints aren't met.
type ListRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesRequestValidationError) ErrorName() string { return "ListRulesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesRequestValidationError{}

// Validate checks the field values on Variables with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Variables) Validate() error {
	if m == nil {
		return nil
	}

	if !_Variables_Name_Pattern.MatchString(m.GetName()) {
		return VariablesValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Type

	if !_Variables_Value_Pattern.MatchString(m.GetValue()) {
		return VariablesValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Description

	return nil
}

// VariablesValidationError is the validation error returned by
// Variables.Validate if the designated constraints aren't met.
type VariablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariablesValidationError) ErrorName() string { return "VariablesValidationError" }

// Error satisfies the builtin error interface
func (e VariablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariablesValidationError{}

var _Variables_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _Variables_Value_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Entity

	// no validation rules for Namespace

	// no validation rules for GroupName

	// no validation rules for Template

	// no validation rules for Status

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on ListRulesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRulesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRulesResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRulesResponseValidationError is the validation error returned by
// ListRulesResponse.Validate if the designated constraints aren't met.
type ListRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesResponseValidationError) ErrorName() string {
	return "ListRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesResponseValidationError{}

// Validate checks the field values on UpdateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRuleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleResponseValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateRuleResponseValidationError is the validation error returned by
// UpdateRuleResponse.Validate if the designated constraints aren't met.
type UpdateRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleResponseValidationError) ErrorName() string {
	return "UpdateRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleResponseValidationError{}

// Validate checks the field values on UpdateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateRuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	if !_UpdateRuleRequest_Entity_Pattern.MatchString(m.GetEntity()) {
		return UpdateRuleRequestValidationError{
			field:  "Entity",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_UpdateRuleRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		return UpdateRuleRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_UpdateRuleRequest_GroupName_Pattern.MatchString(m.GetGroupName()) {
		return UpdateRuleRequestValidationError{
			field:  "GroupName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_UpdateRuleRequest_Template_Pattern.MatchString(m.GetTemplate()) {
		return UpdateRuleRequestValidationError{
			field:  "Template",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if _, ok := _UpdateRuleRequest_Status_InLookup[m.GetStatus()]; !ok {
		return UpdateRuleRequestValidationError{
			field:  "Status",
			reason: "value must be in list [enabled disabled]",
		}
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRuleRequestValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateRuleRequestValidationError is the validation error returned by
// UpdateRuleRequest.Validate if the designated constraints aren't met.
type UpdateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleRequestValidationError) ErrorName() string {
	return "UpdateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleRequestValidationError{}

var _UpdateRuleRequest_Entity_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Namespace_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_GroupName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Template_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Status_InLookup = map[string]struct{}{
	"enabled":  {},
	"disabled": {},
}

// Validate checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTemplatesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tag

	return nil
}

// ListTemplatesRequestValidationError is the validation error returned by
// ListTemplatesRequest.Validate if the designated constraints aren't met.
type ListTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesRequestValidationError) ErrorName() string {
	return "ListTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesRequestValidationError{}

// Validate checks the field values on TemplateVariables with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TemplateVariables) Validate() error {
	if m == nil {
		return nil
	}

	if !_TemplateVariables_Name_Pattern.MatchString(m.GetName()) {
		return TemplateVariablesValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_TemplateVariables_Type_Pattern.MatchString(m.GetType()) {
		return TemplateVariablesValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Default

	// no validation rules for Description

	return nil
}

// TemplateVariablesValidationError is the validation error returned by
// TemplateVariables.Validate if the designated constraints aren't met.
type TemplateVariablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateVariablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateVariablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateVariablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateVariablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateVariablesValidationError) ErrorName() string {
	return "TemplateVariablesValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateVariablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateVariables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateVariablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateVariablesValidationError{}

var _TemplateVariables_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _TemplateVariables_Type_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Template with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Template) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_Template_Name_Pattern.MatchString(m.GetName()) {
		return TemplateValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if !_Template_Body_Pattern.MatchString(m.GetBody()) {
		return TemplateValidationError{
			field:  "Body",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	if len(m.GetTags()) < 1 {
		return TemplateValidationError{
			field:  "Tags",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetVariables()) < 1 {
		return TemplateValidationError{
			field:  "Variables",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TemplateValidationError is the validation error returned by
// Template.Validate if the designated constraints aren't met.
type TemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateValidationError) ErrorName() string { return "TemplateValidationError" }

// Error satisfies the builtin error interface
func (e TemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateValidationError{}

var _Template_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _Template_Body_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on TemplateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TemplateResponseValidationError is the validation error returned by
// TemplateResponse.Validate if the designated constraints aren't met.
type TemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateResponseValidationError) ErrorName() string { return "TemplateResponseValidationError" }

// Error satisfies the builtin error interface
func (e TemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateResponseValidationError{}

// Validate checks the field values on UpsertTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if !_UpsertTemplateRequest_Name_Pattern.MatchString(m.GetName()) {
		return UpsertTemplateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Body

	if len(m.GetTags()) < 1 {
		return UpsertTemplateRequestValidationError{
			field:  "Tags",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if len(m.GetVariables()) < 1 {
		return UpsertTemplateRequestValidationError{
			field:  "Variables",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertTemplateRequestValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertTemplateRequestValidationError is the validation error returned by
// UpsertTemplateRequest.Validate if the designated constraints aren't met.
type UpsertTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertTemplateRequestValidationError) ErrorName() string {
	return "UpsertTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertTemplateRequestValidationError{}

var _UpsertTemplateRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTemplatesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTemplatesResponseValidationError is the validation error returned by
// ListTemplatesResponse.Validate if the designated constraints aren't met.
type ListTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesResponseValidationError) ErrorName() string {
	return "ListTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesResponseValidationError{}

// Validate checks the field values on GetTemplateByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTemplateByNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetTemplateByNameRequest_Name_Pattern.MatchString(m.GetName()) {
		return GetTemplateByNameRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	return nil
}

// GetTemplateByNameRequestValidationError is the validation error returned by
// GetTemplateByNameRequest.Validate if the designated constraints aren't met.
type GetTemplateByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateByNameRequestValidationError) ErrorName() string {
	return "GetTemplateByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateByNameRequestValidationError{}

var _GetTemplateByNameRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteTemplateResponseValidationError is the validation error returned by
// DeleteTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateResponseValidationError) ErrorName() string {
	return "DeleteTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateResponseValidationError{}

// Validate checks the field values on RenderTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RenderTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RenderTemplateRequest_Name_Pattern.MatchString(m.GetName()) {
		return RenderTemplateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
	}

	// no validation rules for Variables

	return nil
}

// RenderTemplateRequestValidationError is the validation error returned by
// RenderTemplateRequest.Validate if the designated constraints aren't met.
type RenderTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderTemplateRequestValidationError) ErrorName() string {
	return "RenderTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderTemplateRequestValidationError{}

var _RenderTemplateRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on RenderTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RenderTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Body

	return nil
}

// RenderTemplateResponseValidationError is the validation error returned by
// RenderTemplateResponse.Validate if the designated constraints aren't met.
type RenderTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderTemplateResponseValidationError) ErrorName() string {
	return "RenderTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderTemplateResponseValidationError{}
