// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: odpf/siren/v1/siren.proto

package sirenv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}
	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}
	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on ListAlertHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAlertHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlertHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlertHistoryRequestMultiError, or nil if none found.
func (m *ListAlertHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlertHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Resource

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ListAlertHistoryRequestMultiError(errors)
	}
	return nil
}

// ListAlertHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by ListAlertHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAlertHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlertHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlertHistoryRequestMultiError) AllErrors() []error { return m }

// ListAlertHistoryRequestValidationError is the validation error returned by
// ListAlertHistoryRequest.Validate if the designated constraints aren't met.
type ListAlertHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertHistoryRequestValidationError) ErrorName() string {
	return "ListAlertHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertHistoryRequestValidationError{}

// Validate checks the field values on ListAlertHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAlertHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlertHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlertHistoryResponseMultiError, or nil if none found.
func (m *ListAlertHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlertHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAlertHistoryResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAlertHistoryResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAlertHistoryResponseValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAlertHistoryResponseMultiError(errors)
	}
	return nil
}

// ListAlertHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by ListAlertHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAlertHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlertHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlertHistoryResponseMultiError) AllErrors() []error { return m }

// ListAlertHistoryResponseValidationError is the validation error returned by
// ListAlertHistoryResponse.Validate if the designated constraints aren't met.
type ListAlertHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertHistoryResponseValidationError) ErrorName() string {
	return "ListAlertHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertHistoryResponseValidationError{}

// Validate checks the field values on AlertHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertHistory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertHistoryMultiError, or
// nil if none found.
func (m *AlertHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for TemplateId

	// no validation rules for MetricName

	// no validation rules for MetricValue

	// no validation rules for Level

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AlertHistoryMultiError(errors)
	}
	return nil
}

// AlertHistoryMultiError is an error wrapping multiple validation errors
// returned by AlertHistory.ValidateAll() if the designated constraints aren't met.
type AlertHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertHistoryMultiError) AllErrors() []error { return m }

// AlertHistoryValidationError is the validation error returned by
// AlertHistory.Validate if the designated constraints aren't met.
type AlertHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertHistoryValidationError) ErrorName() string { return "AlertHistoryValidationError" }

// Error satisfies the builtin error interface
func (e AlertHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertHistoryValidationError{}

// Validate checks the field values on Annotations with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Annotations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Annotations with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnnotationsMultiError, or
// nil if none found.
func (m *Annotations) ValidateAll() error {
	return m.validate(true)
}

func (m *Annotations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricName

	// no validation rules for MetricValue

	// no validation rules for Resource

	// no validation rules for Template

	if len(errors) > 0 {
		return AnnotationsMultiError(errors)
	}
	return nil
}

// AnnotationsMultiError is an error wrapping multiple validation errors
// returned by Annotations.ValidateAll() if the designated constraints aren't met.
type AnnotationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnotationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnotationsMultiError) AllErrors() []error { return m }

// AnnotationsValidationError is the validation error returned by
// Annotations.Validate if the designated constraints aren't met.
type AnnotationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnotationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnotationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnotationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnotationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnotationsValidationError) ErrorName() string { return "AnnotationsValidationError" }

// Error satisfies the builtin error interface
func (e AnnotationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnotations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnotationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnotationsValidationError{}

// Validate checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Labels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LabelsMultiError, or nil if none found.
func (m *Labels) ValidateAll() error {
	return m.validate(true)
}

func (m *Labels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Severity

	if len(errors) > 0 {
		return LabelsMultiError(errors)
	}
	return nil
}

// LabelsMultiError is an error wrapping multiple validation errors returned by
// Labels.ValidateAll() if the designated constraints aren't met.
type LabelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelsMultiError) AllErrors() []error { return m }

// LabelsValidationError is the validation error returned by Labels.Validate if
// the designated constraints aren't met.
type LabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsValidationError) ErrorName() string { return "LabelsValidationError" }

// Error satisfies the builtin error interface
func (e LabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsValidationError{}

// Validate checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Alert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AlertMultiError, or nil if none found.
func (m *Alert) ValidateAll() error {
	return m.validate(true)
}

func (m *Alert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAnnotations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "Annotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "Annotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertValidationError{
				field:  "Annotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLabels()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertValidationError{
				field:  "Labels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return AlertMultiError(errors)
	}
	return nil
}

// AlertMultiError is an error wrapping multiple validation errors returned by
// Alert.ValidateAll() if the designated constraints aren't met.
type AlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertMultiError) AllErrors() []error { return m }

// AlertValidationError is the validation error returned by Alert.Validate if
// the designated constraints aren't met.
type AlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertValidationError) ErrorName() string { return "AlertValidationError" }

// Error satisfies the builtin error interface
func (e AlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertValidationError{}

// Validate checks the field values on CreateAlertHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertHistoryRequestMultiError, or nil if none found.
func (m *CreateAlertHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertHistoryRequestValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertHistoryRequestValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertHistoryRequestValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAlertHistoryRequestMultiError(errors)
	}
	return nil
}

// CreateAlertHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAlertHistoryRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateAlertHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertHistoryRequestMultiError) AllErrors() []error { return m }

// CreateAlertHistoryRequestValidationError is the validation error returned by
// CreateAlertHistoryRequest.Validate if the designated constraints aren't met.
type CreateAlertHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertHistoryRequestValidationError) ErrorName() string {
	return "CreateAlertHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertHistoryRequestValidationError{}

// Validate checks the field values on CreateAlertHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertHistoryResponseMultiError, or nil if none found.
func (m *CreateAlertHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertHistoryResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertHistoryResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertHistoryResponseValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAlertHistoryResponseMultiError(errors)
	}
	return nil
}

// CreateAlertHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAlertHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateAlertHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertHistoryResponseMultiError) AllErrors() []error { return m }

// CreateAlertHistoryResponseValidationError is the validation error returned
// by CreateAlertHistoryResponse.Validate if the designated constraints aren't met.
type CreateAlertHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertHistoryResponseValidationError) ErrorName() string {
	return "CreateAlertHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertHistoryResponseValidationError{}

// Validate checks the field values on Workspace with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Workspace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Workspace with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkspaceMultiError, or nil
// if none found.
func (m *Workspace) ValidateAll() error {
	return m.validate(true)
}

func (m *Workspace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return WorkspaceMultiError(errors)
	}
	return nil
}

// WorkspaceMultiError is an error wrapping multiple validation errors returned
// by Workspace.ValidateAll() if the designated constraints aren't met.
type WorkspaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkspaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkspaceMultiError) AllErrors() []error { return m }

// WorkspaceValidationError is the validation error returned by
// Workspace.Validate if the designated constraints aren't met.
type WorkspaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkspaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkspaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkspaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkspaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkspaceValidationError) ErrorName() string { return "WorkspaceValidationError" }

// Error satisfies the builtin error interface
func (e WorkspaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkspace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkspaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkspaceValidationError{}

// Validate checks the field values on ListWorkspaceChannelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspaceChannelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspaceChannelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkspaceChannelsRequestMultiError, or nil if none found.
func (m *ListWorkspaceChannelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspaceChannelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListWorkspaceChannelsRequest_WorkspaceName_Pattern.MatchString(m.GetWorkspaceName()) {
		err := ListWorkspaceChannelsRequestValidationError{
			field:  "WorkspaceName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWorkspaceChannelsRequestMultiError(errors)
	}
	return nil
}

// ListWorkspaceChannelsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWorkspaceChannelsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListWorkspaceChannelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspaceChannelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspaceChannelsRequestMultiError) AllErrors() []error { return m }

// ListWorkspaceChannelsRequestValidationError is the validation error returned
// by ListWorkspaceChannelsRequest.Validate if the designated constraints
// aren't met.
type ListWorkspaceChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspaceChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspaceChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspaceChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspaceChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspaceChannelsRequestValidationError) ErrorName() string {
	return "ListWorkspaceChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspaceChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspaceChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspaceChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspaceChannelsRequestValidationError{}

var _ListWorkspaceChannelsRequest_WorkspaceName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListWorkspaceChannelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspaceChannelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspaceChannelsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWorkspaceChannelsResponseMultiError, or nil if none found.
func (m *ListWorkspaceChannelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspaceChannelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkspaceChannelsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkspaceChannelsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkspaceChannelsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWorkspaceChannelsResponseMultiError(errors)
	}
	return nil
}

// ListWorkspaceChannelsResponseMultiError is an error wrapping multiple
// validation errors returned by ListWorkspaceChannelsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListWorkspaceChannelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspaceChannelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspaceChannelsResponseMultiError) AllErrors() []error { return m }

// ListWorkspaceChannelsResponseValidationError is the validation error
// returned by ListWorkspaceChannelsResponse.Validate if the designated
// constraints aren't met.
type ListWorkspaceChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspaceChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspaceChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspaceChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspaceChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspaceChannelsResponseValidationError) ErrorName() string {
	return "ListWorkspaceChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspaceChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspaceChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspaceChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspaceChannelsResponseValidationError{}

// Validate checks the field values on ExchangeCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeCodeRequestMultiError, or nil if none found.
func (m *ExchangeCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ExchangeCodeRequest_Code_Pattern.MatchString(m.GetCode()) {
		err := ExchangeCodeRequestValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ExchangeCodeRequest_Workspace_Pattern.MatchString(m.GetWorkspace()) {
		err := ExchangeCodeRequestValidationError{
			field:  "Workspace",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeCodeRequestMultiError(errors)
	}
	return nil
}

// ExchangeCodeRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeCodeRequestMultiError) AllErrors() []error { return m }

// ExchangeCodeRequestValidationError is the validation error returned by
// ExchangeCodeRequest.Validate if the designated constraints aren't met.
type ExchangeCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeCodeRequestValidationError) ErrorName() string {
	return "ExchangeCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeCodeRequestValidationError{}

var _ExchangeCodeRequest_Code_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _ExchangeCodeRequest_Workspace_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ExchangeCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeCodeResponseMultiError, or nil if none found.
func (m *ExchangeCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return ExchangeCodeResponseMultiError(errors)
	}
	return nil
}

// ExchangeCodeResponseMultiError is an error wrapping multiple validation
// errors returned by ExchangeCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type ExchangeCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeCodeResponseMultiError) AllErrors() []error { return m }

// ExchangeCodeResponseValidationError is the validation error returned by
// ExchangeCodeResponse.Validate if the designated constraints aren't met.
type ExchangeCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeCodeResponseValidationError) ErrorName() string {
	return "ExchangeCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeCodeResponseValidationError{}

// Validate checks the field values on GetAlertCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertCredentialsRequestMultiError, or nil if none found.
func (m *GetAlertCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetAlertCredentialsRequest_TeamName_Pattern.MatchString(m.GetTeamName()) {
		err := GetAlertCredentialsRequestValidationError{
			field:  "TeamName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAlertCredentialsRequestMultiError(errors)
	}
	return nil
}

// GetAlertCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by GetAlertCredentialsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAlertCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertCredentialsRequestMultiError) AllErrors() []error { return m }

// GetAlertCredentialsRequestValidationError is the validation error returned
// by GetAlertCredentialsRequest.Validate if the designated constraints aren't met.
type GetAlertCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertCredentialsRequestValidationError) ErrorName() string {
	return "GetAlertCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertCredentialsRequestValidationError{}

var _GetAlertCredentialsRequest_TeamName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Critical with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Critical) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Critical with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CriticalMultiError, or nil
// if none found.
func (m *Critical) ValidateAll() error {
	return m.validate(true)
}

func (m *Critical) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Critical_Channel_Pattern.MatchString(m.GetChannel()) {
		err := CriticalValidationError{
			field:  "Channel",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CriticalMultiError(errors)
	}
	return nil
}

// CriticalMultiError is an error wrapping multiple validation errors returned
// by Critical.ValidateAll() if the designated constraints aren't met.
type CriticalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CriticalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CriticalMultiError) AllErrors() []error { return m }

// CriticalValidationError is the validation error returned by
// Critical.Validate if the designated constraints aren't met.
type CriticalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CriticalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CriticalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CriticalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CriticalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CriticalValidationError) ErrorName() string { return "CriticalValidationError" }

// Error satisfies the builtin error interface
func (e CriticalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCritical.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CriticalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CriticalValidationError{}

var _Critical_Channel_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Warning with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Warning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Warning with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WarningMultiError, or nil if none found.
func (m *Warning) ValidateAll() error {
	return m.validate(true)
}

func (m *Warning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Warning_Channel_Pattern.MatchString(m.GetChannel()) {
		err := WarningValidationError{
			field:  "Channel",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WarningMultiError(errors)
	}
	return nil
}

// WarningMultiError is an error wrapping multiple validation errors returned
// by Warning.ValidateAll() if the designated constraints aren't met.
type WarningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WarningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WarningMultiError) AllErrors() []error { return m }

// WarningValidationError is the validation error returned by Warning.Validate
// if the designated constraints aren't met.
type WarningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarningValidationError) ErrorName() string { return "WarningValidationError" }

// Error satisfies the builtin error interface
func (e WarningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarningValidationError{}

var _Warning_Channel_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on SlackConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SlackConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlackConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SlackConfigMultiError, or
// nil if none found.
func (m *SlackConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *SlackConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCritical() == nil {
		err := SlackConfigValidationError{
			field:  "Critical",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCritical()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SlackConfigValidationError{
					field:  "Critical",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SlackConfigValidationError{
					field:  "Critical",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCritical()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SlackConfigValidationError{
				field:  "Critical",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetWarning() == nil {
		err := SlackConfigValidationError{
			field:  "Warning",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWarning()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SlackConfigValidationError{
					field:  "Warning",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SlackConfigValidationError{
					field:  "Warning",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWarning()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SlackConfigValidationError{
				field:  "Warning",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SlackConfigMultiError(errors)
	}
	return nil
}

// SlackConfigMultiError is an error wrapping multiple validation errors
// returned by SlackConfig.ValidateAll() if the designated constraints aren't met.
type SlackConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlackConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlackConfigMultiError) AllErrors() []error { return m }

// SlackConfigValidationError is the validation error returned by
// SlackConfig.Validate if the designated constraints aren't met.
type SlackConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlackConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlackConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlackConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlackConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlackConfigValidationError) ErrorName() string { return "SlackConfigValidationError" }

// Error satisfies the builtin error interface
func (e SlackConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlackConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlackConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlackConfigValidationError{}

// Validate checks the field values on GetAlertCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertCredentialsResponseMultiError, or nil if none found.
func (m *GetAlertCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Entity

	// no validation rules for TeamName

	// no validation rules for PagerdutyCredentials

	if all {
		switch v := interface{}(m.GetSlackConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertCredentialsResponseValidationError{
					field:  "SlackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertCredentialsResponseValidationError{
					field:  "SlackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlackConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertCredentialsResponseValidationError{
				field:  "SlackConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertCredentialsResponseMultiError(errors)
	}
	return nil
}

// GetAlertCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by GetAlertCredentialsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAlertCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertCredentialsResponseMultiError) AllErrors() []error { return m }

// GetAlertCredentialsResponseValidationError is the validation error returned
// by GetAlertCredentialsResponse.Validate if the designated constraints
// aren't met.
type GetAlertCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertCredentialsResponseValidationError) ErrorName() string {
	return "GetAlertCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertCredentialsResponseValidationError{}

// Validate checks the field values on UpdateAlertCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAlertCredentialsRequestMultiError, or nil if none found.
func (m *UpdateAlertCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateAlertCredentialsRequest_Entity_Pattern.MatchString(m.GetEntity()) {
		err := UpdateAlertCredentialsRequestValidationError{
			field:  "Entity",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TeamName

	if !_UpdateAlertCredentialsRequest_PagerdutyCredentials_Pattern.MatchString(m.GetPagerdutyCredentials()) {
		err := UpdateAlertCredentialsRequestValidationError{
			field:  "PagerdutyCredentials",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSlackConfig() == nil {
		err := UpdateAlertCredentialsRequestValidationError{
			field:  "SlackConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSlackConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlertCredentialsRequestValidationError{
					field:  "SlackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlertCredentialsRequestValidationError{
					field:  "SlackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlackConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlertCredentialsRequestValidationError{
				field:  "SlackConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAlertCredentialsRequestMultiError(errors)
	}
	return nil
}

// UpdateAlertCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAlertCredentialsRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAlertCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertCredentialsRequestMultiError) AllErrors() []error { return m }

// UpdateAlertCredentialsRequestValidationError is the validation error
// returned by UpdateAlertCredentialsRequest.Validate if the designated
// constraints aren't met.
type UpdateAlertCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertCredentialsRequestValidationError) ErrorName() string {
	return "UpdateAlertCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertCredentialsRequestValidationError{}

var _UpdateAlertCredentialsRequest_Entity_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateAlertCredentialsRequest_PagerdutyCredentials_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on UpdateAlertCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAlertCredentialsResponseMultiError, or nil if none found.
func (m *UpdateAlertCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAlertCredentialsResponseMultiError(errors)
	}
	return nil
}

// UpdateAlertCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAlertCredentialsResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateAlertCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertCredentialsResponseMultiError) AllErrors() []error { return m }

// UpdateAlertCredentialsResponseValidationError is the validation error
// returned by UpdateAlertCredentialsResponse.Validate if the designated
// constraints aren't met.
type UpdateAlertCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertCredentialsResponseValidationError) ErrorName() string {
	return "UpdateAlertCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertCredentialsResponseValidationError{}

// Validate checks the field values on SendSlackNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSlackNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSlackNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSlackNotificationRequestMultiError, or nil if none found.
func (m *SendSlackNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSlackNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if !_SendSlackNotificationRequest_Entity_Pattern.MatchString(m.GetEntity()) {
		err := SendSlackNotificationRequestValidationError{
			field:  "Entity",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Message

	if !_SendSlackNotificationRequest_ReceiverName_Pattern.MatchString(m.GetReceiverName()) {
		err := SendSlackNotificationRequestValidationError{
			field:  "ReceiverName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SendSlackNotificationRequest_ReceiverType_InLookup[m.GetReceiverType()]; !ok {
		err := SendSlackNotificationRequestValidationError{
			field:  "ReceiverType",
			reason: "value must be in list [user channel]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendSlackNotificationRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendSlackNotificationRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendSlackNotificationRequestValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendSlackNotificationRequestMultiError(errors)
	}
	return nil
}

// SendSlackNotificationRequestMultiError is an error wrapping multiple
// validation errors returned by SendSlackNotificationRequest.ValidateAll() if
// the designated constraints aren't met.
type SendSlackNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSlackNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSlackNotificationRequestMultiError) AllErrors() []error { return m }

// SendSlackNotificationRequestValidationError is the validation error returned
// by SendSlackNotificationRequest.Validate if the designated constraints
// aren't met.
type SendSlackNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSlackNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSlackNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSlackNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSlackNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSlackNotificationRequestValidationError) ErrorName() string {
	return "SendSlackNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendSlackNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSlackNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSlackNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSlackNotificationRequestValidationError{}

var _SendSlackNotificationRequest_Entity_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _SendSlackNotificationRequest_ReceiverName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _SendSlackNotificationRequest_ReceiverType_InLookup = map[string]struct{}{
	"user":    {},
	"channel": {},
}

// Validate checks the field values on SendSlackNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSlackNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSlackNotificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendSlackNotificationResponseMultiError, or nil if none found.
func (m *SendSlackNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSlackNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return SendSlackNotificationResponseMultiError(errors)
	}
	return nil
}

// SendSlackNotificationResponseMultiError is an error wrapping multiple
// validation errors returned by SendSlackNotificationResponse.ValidateAll()
// if the designated constraints aren't met.
type SendSlackNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSlackNotificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSlackNotificationResponseMultiError) AllErrors() []error { return m }

// SendSlackNotificationResponseValidationError is the validation error
// returned by SendSlackNotificationResponse.Validate if the designated
// constraints aren't met.
type SendSlackNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSlackNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSlackNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSlackNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSlackNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSlackNotificationResponseValidationError) ErrorName() string {
	return "SendSlackNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendSlackNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSlackNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSlackNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSlackNotificationResponseValidationError{}

// Validate checks the field values on ListRulesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesRequestMultiError, or nil if none found.
func (m *ListRulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Entity

	// no validation rules for GroupName

	// no validation rules for Status

	// no validation rules for Template

	if len(errors) > 0 {
		return ListRulesRequestMultiError(errors)
	}
	return nil
}

// ListRulesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRulesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesRequestMultiError) AllErrors() []error { return m }

// ListRulesRequestValidationError is the validation error returned by
// ListRulesRequest.Validate if the designated constraints aren't met.
type ListRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesRequestValidationError) ErrorName() string { return "ListRulesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesRequestValidationError{}

// Validate checks the field values on Variables with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Variables) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Variables with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VariablesMultiError, or nil
// if none found.
func (m *Variables) ValidateAll() error {
	return m.validate(true)
}

func (m *Variables) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Variables_Name_Pattern.MatchString(m.GetName()) {
		err := VariablesValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if !_Variables_Value_Pattern.MatchString(m.GetValue()) {
		err := VariablesValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return VariablesMultiError(errors)
	}
	return nil
}

// VariablesMultiError is an error wrapping multiple validation errors returned
// by Variables.ValidateAll() if the designated constraints aren't met.
type VariablesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VariablesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VariablesMultiError) AllErrors() []error { return m }

// VariablesValidationError is the validation error returned by
// Variables.Validate if the designated constraints aren't met.
type VariablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariablesValidationError) ErrorName() string { return "VariablesValidationError" }

// Error satisfies the builtin error interface
func (e VariablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariablesValidationError{}

var _Variables_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _Variables_Value_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleMultiError, or nil if none found.
func (m *Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Entity

	// no validation rules for Namespace

	// no validation rules for GroupName

	// no validation rules for Template

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RuleMultiError(errors)
	}
	return nil
}

// RuleMultiError is an error wrapping multiple validation errors returned by
// Rule.ValidateAll() if the designated constraints aren't met.
type RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleMultiError) AllErrors() []error { return m }

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on ListRulesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesResponseMultiError, or nil if none found.
func (m *ListRulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRulesResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRulesResponseMultiError(errors)
	}
	return nil
}

// ListRulesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRulesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesResponseMultiError) AllErrors() []error { return m }

// ListRulesResponseValidationError is the validation error returned by
// ListRulesResponse.Validate if the designated constraints aren't met.
type ListRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesResponseValidationError) ErrorName() string {
	return "ListRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesResponseValidationError{}

// Validate checks the field values on UpdateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleResponseMultiError, or nil if none found.
func (m *UpdateRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRuleResponseValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRuleResponseValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleResponseValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRuleResponseMultiError(errors)
	}
	return nil
}

// UpdateRuleResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRuleResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleResponseMultiError) AllErrors() []error { return m }

// UpdateRuleResponseValidationError is the validation error returned by
// UpdateRuleResponse.Validate if the designated constraints aren't met.
type UpdateRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleResponseValidationError) ErrorName() string {
	return "UpdateRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleResponseValidationError{}

// Validate checks the field values on UpdateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleRequestMultiError, or nil if none found.
func (m *UpdateRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if !_UpdateRuleRequest_Entity_Pattern.MatchString(m.GetEntity()) {
		err := UpdateRuleRequestValidationError{
			field:  "Entity",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateRuleRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := UpdateRuleRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateRuleRequest_GroupName_Pattern.MatchString(m.GetGroupName()) {
		err := UpdateRuleRequestValidationError{
			field:  "GroupName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateRuleRequest_Template_Pattern.MatchString(m.GetTemplate()) {
		err := UpdateRuleRequestValidationError{
			field:  "Template",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateRuleRequest_Status_Pattern.MatchString(m.GetStatus()) {
		err := UpdateRuleRequestValidationError{
			field:  "Status",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetVariables()) < 1 {
		err := UpdateRuleRequestValidationError{
			field:  "Variables",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRuleRequestValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRuleRequestValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRuleRequestValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateRuleRequestMultiError(errors)
	}
	return nil
}

// UpdateRuleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleRequestMultiError) AllErrors() []error { return m }

// UpdateRuleRequestValidationError is the validation error returned by
// UpdateRuleRequest.Validate if the designated constraints aren't met.
type UpdateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleRequestValidationError) ErrorName() string {
	return "UpdateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleRequestValidationError{}

var _UpdateRuleRequest_Entity_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Namespace_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_GroupName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Template_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Status_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesRequestMultiError, or nil if none found.
func (m *ListTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tag

	if len(errors) > 0 {
		return ListTemplatesRequestMultiError(errors)
	}
	return nil
}

// ListTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesRequestMultiError) AllErrors() []error { return m }

// ListTemplatesRequestValidationError is the validation error returned by
// ListTemplatesRequest.Validate if the designated constraints aren't met.
type ListTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesRequestValidationError) ErrorName() string {
	return "ListTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesRequestValidationError{}

// Validate checks the field values on TemplateVariables with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TemplateVariables) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateVariables with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemplateVariablesMultiError, or nil if none found.
func (m *TemplateVariables) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateVariables) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_TemplateVariables_Name_Pattern.MatchString(m.GetName()) {
		err := TemplateVariablesValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_TemplateVariables_Type_Pattern.MatchString(m.GetType()) {
		err := TemplateVariablesValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Default

	// no validation rules for Description

	if len(errors) > 0 {
		return TemplateVariablesMultiError(errors)
	}
	return nil
}

// TemplateVariablesMultiError is an error wrapping multiple validation errors
// returned by TemplateVariables.ValidateAll() if the designated constraints
// aren't met.
type TemplateVariablesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateVariablesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateVariablesMultiError) AllErrors() []error { return m }

// TemplateVariablesValidationError is the validation error returned by
// TemplateVariables.Validate if the designated constraints aren't met.
type TemplateVariablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateVariablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateVariablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateVariablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateVariablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateVariablesValidationError) ErrorName() string {
	return "TemplateVariablesValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateVariablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateVariables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateVariablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateVariablesValidationError{}

var _TemplateVariables_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _TemplateVariables_Type_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Template with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Template) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Template with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplateMultiError, or nil
// if none found.
func (m *Template) ValidateAll() error {
	return m.validate(true)
}

func (m *Template) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_Template_Name_Pattern.MatchString(m.GetName()) {
		err := TemplateValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Template_Body_Pattern.MatchString(m.GetBody()) {
		err := TemplateValidationError{
			field:  "Body",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) < 1 {
		err := TemplateValidationError{
			field:  "Tags",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetVariables()) < 1 {
		err := TemplateValidationError{
			field:  "Variables",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TemplateMultiError(errors)
	}
	return nil
}

// TemplateMultiError is an error wrapping multiple validation errors returned
// by Template.ValidateAll() if the designated constraints aren't met.
type TemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateMultiError) AllErrors() []error { return m }

// TemplateValidationError is the validation error returned by
// Template.Validate if the designated constraints aren't met.
type TemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateValidationError) ErrorName() string { return "TemplateValidationError" }

// Error satisfies the builtin error interface
func (e TemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateValidationError{}

var _Template_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _Template_Body_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on TemplateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemplateResponseMultiError, or nil if none found.
func (m *TemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TemplateResponseMultiError(errors)
	}
	return nil
}

// TemplateResponseMultiError is an error wrapping multiple validation errors
// returned by TemplateResponse.ValidateAll() if the designated constraints
// aren't met.
type TemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateResponseMultiError) AllErrors() []error { return m }

// TemplateResponseValidationError is the validation error returned by
// TemplateResponse.Validate if the designated constraints aren't met.
type TemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateResponseValidationError) ErrorName() string { return "TemplateResponseValidationError" }

// Error satisfies the builtin error interface
func (e TemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateResponseValidationError{}

// Validate checks the field values on UpsertTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertTemplateRequestMultiError, or nil if none found.
func (m *UpsertTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_UpsertTemplateRequest_Name_Pattern.MatchString(m.GetName()) {
		err := UpsertTemplateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpsertTemplateRequest_Body_Pattern.MatchString(m.GetBody()) {
		err := UpsertTemplateRequestValidationError{
			field:  "Body",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetVariables()) < 1 {
		err := UpsertTemplateRequestValidationError{
			field:  "Variables",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertTemplateRequestValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertTemplateRequestValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertTemplateRequestValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertTemplateRequestMultiError(errors)
	}
	return nil
}

// UpsertTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertTemplateRequestMultiError) AllErrors() []error { return m }

// UpsertTemplateRequestValidationError is the validation error returned by
// UpsertTemplateRequest.Validate if the designated constraints aren't met.
type UpsertTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertTemplateRequestValidationError) ErrorName() string {
	return "UpsertTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertTemplateRequestValidationError{}

var _UpsertTemplateRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpsertTemplateRequest_Body_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesResponseMultiError, or nil if none found.
func (m *ListTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplatesResponseMultiError(errors)
	}
	return nil
}

// ListTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesResponseMultiError) AllErrors() []error { return m }

// ListTemplatesResponseValidationError is the validation error returned by
// ListTemplatesResponse.Validate if the designated constraints aren't met.
type ListTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesResponseValidationError) ErrorName() string {
	return "ListTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesResponseValidationError{}

// Validate checks the field values on GetTemplateByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateByNameRequestMultiError, or nil if none found.
func (m *GetTemplateByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetTemplateByNameRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetTemplateByNameRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateByNameRequestMultiError(errors)
	}
	return nil
}

// GetTemplateByNameRequestMultiError is an error wrapping multiple validation
// errors returned by GetTemplateByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateByNameRequestMultiError) AllErrors() []error { return m }

// GetTemplateByNameRequestValidationError is the validation error returned by
// GetTemplateByNameRequest.Validate if the designated constraints aren't met.
type GetTemplateByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateByNameRequestValidationError) ErrorName() string {
	return "GetTemplateByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateByNameRequestValidationError{}

var _GetTemplateByNameRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateRequestMultiError, or nil if none found.
func (m *DeleteTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteTemplateRequestMultiError(errors)
	}
	return nil
}

// DeleteTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateResponseMultiError, or nil if none found.
func (m *DeleteTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTemplateResponseMultiError(errors)
	}
	return nil
}

// DeleteTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteTemplateResponseValidationError is the validation error returned by
// DeleteTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateResponseValidationError) ErrorName() string {
	return "DeleteTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateResponseValidationError{}

// Validate checks the field values on RenderTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderTemplateRequestMultiError, or nil if none found.
func (m *RenderTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RenderTemplateRequest_Name_Pattern.MatchString(m.GetName()) {
		err := RenderTemplateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Variables

	if len(errors) > 0 {
		return RenderTemplateRequestMultiError(errors)
	}
	return nil
}

// RenderTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by RenderTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type RenderTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderTemplateRequestMultiError) AllErrors() []error { return m }

// RenderTemplateRequestValidationError is the validation error returned by
// RenderTemplateRequest.Validate if the designated constraints aren't met.
type RenderTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderTemplateRequestValidationError) ErrorName() string {
	return "RenderTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderTemplateRequestValidationError{}

var _RenderTemplateRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on RenderTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderTemplateResponseMultiError, or nil if none found.
func (m *RenderTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Body

	if len(errors) > 0 {
		return RenderTemplateResponseMultiError(errors)
	}
	return nil
}

// RenderTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by RenderTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type RenderTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderTemplateResponseMultiError) AllErrors() []error { return m }

// RenderTemplateResponseValidationError is the validation error returned by
// RenderTemplateResponse.Validate if the designated constraints aren't met.
type RenderTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderTemplateResponseValidationError) ErrorName() string {
	return "RenderTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderTemplateResponseValidationError{}
