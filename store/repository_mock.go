// Code generated by mockery v2.10.0. DO NOT EDIT.

package store

import (
	domain "github.com/odpf/siren/domain"
	mock "github.com/stretchr/testify/mock"
)

// NamespaceRepositoryMock is an autogenerated mock type for the NamespaceRepository type
type NamespaceRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *NamespaceRepositoryMock) Create(_a0 *domain.EncryptedNamespace) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.EncryptedNamespace) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *NamespaceRepositoryMock) Delete(_a0 uint64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *NamespaceRepositoryMock) Get(_a0 uint64) (*domain.EncryptedNamespace, error) {
	ret := _m.Called(_a0)

	var r0 *domain.EncryptedNamespace
	if rf, ok := ret.Get(0).(func(uint64) *domain.EncryptedNamespace); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.EncryptedNamespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *NamespaceRepositoryMock) List() ([]*domain.EncryptedNamespace, error) {
	ret := _m.Called()

	var r0 []*domain.EncryptedNamespace
	if rf, ok := ret.Get(0).(func() []*domain.EncryptedNamespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.EncryptedNamespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields:
func (_m *NamespaceRepositoryMock) Migrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *NamespaceRepositoryMock) Update(_a0 *domain.EncryptedNamespace) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.EncryptedNamespace) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
