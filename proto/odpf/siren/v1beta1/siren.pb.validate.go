// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: odpf/siren/v1beta1/siren.proto

package sirenv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Provider with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderMultiError, or nil
// if none found.
func (m *Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Host

	// no validation rules for Urn

	// no validation rules for Name

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProviderValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProviderValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProviderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProviderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProviderValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProviderValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProviderMultiError(errors)
	}
	return nil
}

// ProviderMultiError is an error wrapping multiple validation errors returned
// by Provider.ValidateAll() if the designated constraints aren't met.
type ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderMultiError) AllErrors() []error { return m }

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

// Validate checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersRequestMultiError, or nil if none found.
func (m *ListProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	// no validation rules for Type

	if len(errors) > 0 {
		return ListProvidersRequestMultiError(errors)
	}
	return nil
}

// ListProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by ListProvidersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersRequestMultiError) AllErrors() []error { return m }

// ListProvidersRequestValidationError is the validation error returned by
// ListProvidersRequest.Validate if the designated constraints aren't met.
type ListProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersRequestValidationError) ErrorName() string {
	return "ListProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersRequestValidationError{}

// Validate checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersResponseMultiError, or nil if none found.
func (m *ListProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProvidersResponseMultiError(errors)
	}
	return nil
}

// ListProvidersResponseMultiError is an error wrapping multiple validation
// errors returned by ListProvidersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersResponseMultiError) AllErrors() []error { return m }

// ListProvidersResponseValidationError is the validation error returned by
// ListProvidersResponse.Validate if the designated constraints aren't met.
type ListProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponseValidationError) ErrorName() string {
	return "ListProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponseValidationError{}

// Validate checks the field values on CreateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProviderRequestMultiError, or nil if none found.
func (m *CreateProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetHost()); err != nil {
		err = CreateProviderRequestValidationError{
			field:  "Host",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateProviderRequestValidationError{
			field:  "Host",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateProviderRequest_Urn_Pattern.MatchString(m.GetUrn()) {
		err := CreateProviderRequestValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateProviderRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateProviderRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProviderRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProviderRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProviderRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if len(errors) > 0 {
		return CreateProviderRequestMultiError(errors)
	}
	return nil
}

// CreateProviderRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProviderRequestMultiError) AllErrors() []error { return m }

// CreateProviderRequestValidationError is the validation error returned by
// CreateProviderRequest.Validate if the designated constraints aren't met.
type CreateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProviderRequestValidationError) ErrorName() string {
	return "CreateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProviderRequestValidationError{}

var _CreateProviderRequest_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _CreateProviderRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on CreateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProviderResponseMultiError, or nil if none found.
func (m *CreateProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProviderResponseMultiError(errors)
	}
	return nil
}

// CreateProviderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProviderResponseMultiError) AllErrors() []error { return m }

// CreateProviderResponseValidationError is the validation error returned by
// CreateProviderResponse.Validate if the designated constraints aren't met.
type CreateProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProviderResponseValidationError) ErrorName() string {
	return "CreateProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProviderResponseValidationError{}

// Validate checks the field values on GetProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProviderRequestMultiError, or nil if none found.
func (m *GetProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProviderRequestMultiError(errors)
	}
	return nil
}

// GetProviderRequestMultiError is an error wrapping multiple validation errors
// returned by GetProviderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProviderRequestMultiError) AllErrors() []error { return m }

// GetProviderRequestValidationError is the validation error returned by
// GetProviderRequest.Validate if the designated constraints aren't met.
type GetProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderRequestValidationError) ErrorName() string {
	return "GetProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderRequestValidationError{}

// Validate checks the field values on GetProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProviderResponseMultiError, or nil if none found.
func (m *GetProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProviderResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProviderResponseMultiError(errors)
	}
	return nil
}

// GetProviderResponseMultiError is an error wrapping multiple validation
// errors returned by GetProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProviderResponseMultiError) AllErrors() []error { return m }

// GetProviderResponseValidationError is the validation error returned by
// GetProviderResponse.Validate if the designated constraints aren't met.
type GetProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderResponseValidationError) ErrorName() string {
	return "GetProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderResponseValidationError{}

// Validate checks the field values on UpdateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProviderRequestMultiError, or nil if none found.
func (m *UpdateProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if uri, err := url.Parse(m.GetHost()); err != nil {
		err = UpdateProviderRequestValidationError{
			field:  "Host",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := UpdateProviderRequestValidationError{
			field:  "Host",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateProviderRequest_Name_Pattern.MatchString(m.GetName()) {
		err := UpdateProviderRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProviderRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProviderRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProviderRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if len(errors) > 0 {
		return UpdateProviderRequestMultiError(errors)
	}
	return nil
}

// UpdateProviderRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProviderRequestMultiError) AllErrors() []error { return m }

// UpdateProviderRequestValidationError is the validation error returned by
// UpdateProviderRequest.Validate if the designated constraints aren't met.
type UpdateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderRequestValidationError) ErrorName() string {
	return "UpdateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderRequestValidationError{}

var _UpdateProviderRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on UpdateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProviderResponseMultiError, or nil if none found.
func (m *UpdateProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateProviderResponseMultiError(errors)
	}
	return nil
}

// UpdateProviderResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProviderResponseMultiError) AllErrors() []error { return m }

// UpdateProviderResponseValidationError is the validation error returned by
// UpdateProviderResponse.Validate if the designated constraints aren't met.
type UpdateProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderResponseValidationError) ErrorName() string {
	return "UpdateProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderResponseValidationError{}

// Validate checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProviderRequestMultiError, or nil if none found.
func (m *DeleteProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProviderRequestMultiError(errors)
	}
	return nil
}

// DeleteProviderRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProviderRequestMultiError) AllErrors() []error { return m }

// DeleteProviderRequestValidationError is the validation error returned by
// DeleteProviderRequest.Validate if the designated constraints aren't met.
type DeleteProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderRequestValidationError) ErrorName() string {
	return "DeleteProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderRequestValidationError{}

// Validate checks the field values on DeleteProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProviderResponseMultiError, or nil if none found.
func (m *DeleteProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProviderResponseMultiError(errors)
	}
	return nil
}

// DeleteProviderResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProviderResponseMultiError) AllErrors() []error { return m }

// DeleteProviderResponseValidationError is the validation error returned by
// DeleteProviderResponse.Validate if the designated constraints aren't met.
type DeleteProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderResponseValidationError) ErrorName() string {
	return "DeleteProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderResponseValidationError{}

// Validate checks the field values on Namespace with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Namespace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Namespace with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamespaceMultiError, or nil
// if none found.
func (m *Namespace) ValidateAll() error {
	return m.validate(true)
}

func (m *Namespace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Urn

	// no validation rules for Name

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamespaceMultiError(errors)
	}
	return nil
}

// NamespaceMultiError is an error wrapping multiple validation errors returned
// by Namespace.ValidateAll() if the designated constraints aren't met.
type NamespaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceMultiError) AllErrors() []error { return m }

// NamespaceValidationError is the validation error returned by
// Namespace.Validate if the designated constraints aren't met.
type NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceValidationError) ErrorName() string { return "NamespaceValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceValidationError{}

// Validate checks the field values on ListNamespacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespacesRequestMultiError, or nil if none found.
func (m *ListNamespacesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListNamespacesRequestMultiError(errors)
	}
	return nil
}

// ListNamespacesRequestMultiError is an error wrapping multiple validation
// errors returned by ListNamespacesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacesRequestMultiError) AllErrors() []error { return m }

// ListNamespacesRequestValidationError is the validation error returned by
// ListNamespacesRequest.Validate if the designated constraints aren't met.
type ListNamespacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesRequestValidationError) ErrorName() string {
	return "ListNamespacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesRequestValidationError{}

// Validate checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespacesResponseMultiError, or nil if none found.
func (m *ListNamespacesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespacesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespacesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespacesResponseValidationError{
					field:  fmt.Sprintf("Namespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNamespacesResponseMultiError(errors)
	}
	return nil
}

// ListNamespacesResponseMultiError is an error wrapping multiple validation
// errors returned by ListNamespacesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacesResponseMultiError) AllErrors() []error { return m }

// ListNamespacesResponseValidationError is the validation error returned by
// ListNamespacesResponse.Validate if the designated constraints aren't met.
type ListNamespacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesResponseValidationError) ErrorName() string {
	return "ListNamespacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesResponseValidationError{}

// Validate checks the field values on CreateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNamespaceRequestMultiError, or nil if none found.
func (m *CreateNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateNamespaceRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateNamespaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateNamespaceRequest_Urn_Pattern.MatchString(m.GetUrn()) {
		err := CreateNamespaceRequestValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceRequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceRequestValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceRequestValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceRequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespaceRequestMultiError(errors)
	}
	return nil
}

// CreateNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceRequestMultiError) AllErrors() []error { return m }

// CreateNamespaceRequestValidationError is the validation error returned by
// CreateNamespaceRequest.Validate if the designated constraints aren't met.
type CreateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceRequestValidationError) ErrorName() string {
	return "CreateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceRequestValidationError{}

var _CreateNamespaceRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _CreateNamespaceRequest_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on CreateNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNamespaceResponseMultiError, or nil if none found.
func (m *CreateNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateNamespaceResponseMultiError(errors)
	}
	return nil
}

// CreateNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceResponseMultiError) AllErrors() []error { return m }

// CreateNamespaceResponseValidationError is the validation error returned by
// CreateNamespaceResponse.Validate if the designated constraints aren't met.
type CreateNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceResponseValidationError) ErrorName() string {
	return "CreateNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceResponseValidationError{}

// Validate checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceRequestMultiError, or nil if none found.
func (m *GetNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNamespaceRequestMultiError(errors)
	}
	return nil
}

// GetNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceRequestMultiError) AllErrors() []error { return m }

// GetNamespaceRequestValidationError is the validation error returned by
// GetNamespaceRequest.Validate if the designated constraints aren't met.
type GetNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceRequestValidationError) ErrorName() string {
	return "GetNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceRequestValidationError{}

// Validate checks the field values on GetNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceResponseMultiError, or nil if none found.
func (m *GetNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceResponseValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespaceResponseMultiError(errors)
	}
	return nil
}

// GetNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceResponseMultiError) AllErrors() []error { return m }

// GetNamespaceResponseValidationError is the validation error returned by
// GetNamespaceResponse.Validate if the designated constraints aren't met.
type GetNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceResponseValidationError) ErrorName() string {
	return "GetNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceResponseValidationError{}

// Validate checks the field values on UpdateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNamespaceRequestMultiError, or nil if none found.
func (m *UpdateNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_UpdateNamespaceRequest_Name_Pattern.MatchString(m.GetName()) {
		err := UpdateNamespaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	if len(errors) > 0 {
		return UpdateNamespaceRequestMultiError(errors)
	}
	return nil
}

// UpdateNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceRequestMultiError) AllErrors() []error { return m }

// UpdateNamespaceRequestValidationError is the validation error returned by
// UpdateNamespaceRequest.Validate if the designated constraints aren't met.
type UpdateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceRequestValidationError) ErrorName() string {
	return "UpdateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceRequestValidationError{}

var _UpdateNamespaceRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on UpdateNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNamespaceResponseMultiError, or nil if none found.
func (m *UpdateNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateNamespaceResponseMultiError(errors)
	}
	return nil
}

// UpdateNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceResponseMultiError) AllErrors() []error { return m }

// UpdateNamespaceResponseValidationError is the validation error returned by
// UpdateNamespaceResponse.Validate if the designated constraints aren't met.
type UpdateNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceResponseValidationError) ErrorName() string {
	return "UpdateNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceResponseValidationError{}

// Validate checks the field values on DeleteNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNamespaceRequestMultiError, or nil if none found.
func (m *DeleteNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteNamespaceRequestMultiError(errors)
	}
	return nil
}

// DeleteNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceRequestMultiError) AllErrors() []error { return m }

// DeleteNamespaceRequestValidationError is the validation error returned by
// DeleteNamespaceRequest.Validate if the designated constraints aren't met.
type DeleteNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceRequestValidationError) ErrorName() string {
	return "DeleteNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceRequestValidationError{}

// Validate checks the field values on DeleteNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNamespaceResponseMultiError, or nil if none found.
func (m *DeleteNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNamespaceResponseMultiError(errors)
	}
	return nil
}

// DeleteNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceResponseMultiError) AllErrors() []error { return m }

// DeleteNamespaceResponseValidationError is the validation error returned by
// DeleteNamespaceResponse.Validate if the designated constraints aren't met.
type DeleteNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceResponseValidationError) ErrorName() string {
	return "DeleteNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceResponseValidationError{}

// Validate checks the field values on ReceiverMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReceiverMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiverMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiverMetadataMultiError, or nil if none found.
func (m *ReceiverMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiverMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Configuration

	if len(errors) > 0 {
		return ReceiverMetadataMultiError(errors)
	}
	return nil
}

// ReceiverMetadataMultiError is an error wrapping multiple validation errors
// returned by ReceiverMetadata.ValidateAll() if the designated constraints
// aren't met.
type ReceiverMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiverMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiverMetadataMultiError) AllErrors() []error { return m }

// ReceiverMetadataValidationError is the validation error returned by
// ReceiverMetadata.Validate if the designated constraints aren't met.
type ReceiverMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiverMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiverMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiverMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiverMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiverMetadataValidationError) ErrorName() string { return "ReceiverMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ReceiverMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiverMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiverMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiverMetadataValidationError{}

// Validate checks the field values on Subscription with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subscription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subscription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscriptionMultiError, or
// nil if none found.
func (m *Subscription) ValidateAll() error {
	return m.validate(true)
}

func (m *Subscription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_Subscription_Urn_Pattern.MatchString(m.GetUrn()) {
		err := SubscriptionValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	for idx, item := range m.GetReceivers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubscriptionValidationError{
						field:  fmt.Sprintf("Receivers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubscriptionValidationError{
						field:  fmt.Sprintf("Receivers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscriptionValidationError{
					field:  fmt.Sprintf("Receivers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Match

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscriptionMultiError(errors)
	}
	return nil
}

// SubscriptionMultiError is an error wrapping multiple validation errors
// returned by Subscription.ValidateAll() if the designated constraints aren't met.
type SubscriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionMultiError) AllErrors() []error { return m }

// SubscriptionValidationError is the validation error returned by
// Subscription.Validate if the designated constraints aren't met.
type SubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionValidationError) ErrorName() string { return "SubscriptionValidationError" }

// Error satisfies the builtin error interface
func (e SubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionValidationError{}

var _Subscription_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListSubscriptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubscriptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubscriptionsRequestMultiError, or nil if none found.
func (m *ListSubscriptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubscriptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSubscriptionsRequestMultiError(errors)
	}
	return nil
}

// ListSubscriptionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSubscriptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSubscriptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubscriptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubscriptionsRequestMultiError) AllErrors() []error { return m }

// ListSubscriptionsRequestValidationError is the validation error returned by
// ListSubscriptionsRequest.Validate if the designated constraints aren't met.
type ListSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubscriptionsRequestValidationError) ErrorName() string {
	return "ListSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubscriptionsRequestValidationError{}

// Validate checks the field values on ListSubscriptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubscriptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubscriptionsResponseMultiError, or nil if none found.
func (m *ListSubscriptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubscriptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubscriptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubscriptionsResponseValidationError{
					field:  fmt.Sprintf("Subscriptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubscriptionsResponseMultiError(errors)
	}
	return nil
}

// ListSubscriptionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSubscriptionsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListSubscriptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubscriptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubscriptionsResponseMultiError) AllErrors() []error { return m }

// ListSubscriptionsResponseValidationError is the validation error returned by
// ListSubscriptionsResponse.Validate if the designated constraints aren't met.
type ListSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubscriptionsResponseValidationError) ErrorName() string {
	return "ListSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubscriptionsResponseValidationError{}

// Validate checks the field values on CreateSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubscriptionRequestMultiError, or nil if none found.
func (m *CreateSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateSubscriptionRequest_Urn_Pattern.MatchString(m.GetUrn()) {
		err := CreateSubscriptionRequestValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	for idx, item := range m.GetReceivers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSubscriptionRequestValidationError{
						field:  fmt.Sprintf("Receivers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSubscriptionRequestValidationError{
						field:  fmt.Sprintf("Receivers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSubscriptionRequestValidationError{
					field:  fmt.Sprintf("Receivers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Match

	if len(errors) > 0 {
		return CreateSubscriptionRequestMultiError(errors)
	}
	return nil
}

// CreateSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubscriptionRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubscriptionRequestMultiError) AllErrors() []error { return m }

// CreateSubscriptionRequestValidationError is the validation error returned by
// CreateSubscriptionRequest.Validate if the designated constraints aren't met.
type CreateSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubscriptionRequestValidationError) ErrorName() string {
	return "CreateSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubscriptionRequestValidationError{}

var _CreateSubscriptionRequest_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on CreateSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubscriptionResponseMultiError, or nil if none found.
func (m *CreateSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateSubscriptionResponseMultiError(errors)
	}
	return nil
}

// CreateSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by CreateSubscriptionResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubscriptionResponseMultiError) AllErrors() []error { return m }

// CreateSubscriptionResponseValidationError is the validation error returned
// by CreateSubscriptionResponse.Validate if the designated constraints aren't met.
type CreateSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubscriptionResponseValidationError) ErrorName() string {
	return "CreateSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubscriptionResponseValidationError{}

// Validate checks the field values on GetSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscriptionRequestMultiError, or nil if none found.
func (m *GetSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSubscriptionRequestMultiError(errors)
	}
	return nil
}

// GetSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubscriptionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscriptionRequestMultiError) AllErrors() []error { return m }

// GetSubscriptionRequestValidationError is the validation error returned by
// GetSubscriptionRequest.Validate if the designated constraints aren't met.
type GetSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscriptionRequestValidationError) ErrorName() string {
	return "GetSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscriptionRequestValidationError{}

// Validate checks the field values on GetSubscriptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscriptionResponseMultiError, or nil if none found.
func (m *GetSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSubscriptionResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSubscriptionResponseMultiError(errors)
	}
	return nil
}

// GetSubscriptionResponseMultiError is an error wrapping multiple validation
// errors returned by GetSubscriptionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscriptionResponseMultiError) AllErrors() []error { return m }

// GetSubscriptionResponseValidationError is the validation error returned by
// GetSubscriptionResponse.Validate if the designated constraints aren't met.
type GetSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscriptionResponseValidationError) ErrorName() string {
	return "GetSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscriptionResponseValidationError{}

// Validate checks the field values on UpdateSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionRequestMultiError, or nil if none found.
func (m *UpdateSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_UpdateSubscriptionRequest_Urn_Pattern.MatchString(m.GetUrn()) {
		err := UpdateSubscriptionRequestValidationError{
			field:  "Urn",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	for idx, item := range m.GetReceivers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSubscriptionRequestValidationError{
						field:  fmt.Sprintf("Receivers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSubscriptionRequestValidationError{
						field:  fmt.Sprintf("Receivers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSubscriptionRequestValidationError{
					field:  fmt.Sprintf("Receivers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Match

	if len(errors) > 0 {
		return UpdateSubscriptionRequestMultiError(errors)
	}
	return nil
}

// UpdateSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSubscriptionRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionRequestMultiError) AllErrors() []error { return m }

// UpdateSubscriptionRequestValidationError is the validation error returned by
// UpdateSubscriptionRequest.Validate if the designated constraints aren't met.
type UpdateSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionRequestValidationError) ErrorName() string {
	return "UpdateSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionRequestValidationError{}

var _UpdateSubscriptionRequest_Urn_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on UpdateSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionResponseMultiError, or nil if none found.
func (m *UpdateSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateSubscriptionResponseMultiError(errors)
	}
	return nil
}

// UpdateSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSubscriptionResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionResponseMultiError) AllErrors() []error { return m }

// UpdateSubscriptionResponseValidationError is the validation error returned
// by UpdateSubscriptionResponse.Validate if the designated constraints aren't met.
type UpdateSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionResponseValidationError) ErrorName() string {
	return "UpdateSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionResponseValidationError{}

// Validate checks the field values on DeleteSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubscriptionRequestMultiError, or nil if none found.
func (m *DeleteSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSubscriptionRequestMultiError(errors)
	}
	return nil
}

// DeleteSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSubscriptionRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubscriptionRequestMultiError) AllErrors() []error { return m }

// DeleteSubscriptionRequestValidationError is the validation error returned by
// DeleteSubscriptionRequest.Validate if the designated constraints aren't met.
type DeleteSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubscriptionRequestValidationError) ErrorName() string {
	return "DeleteSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubscriptionRequestValidationError{}

// Validate checks the field values on DeleteSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubscriptionResponseMultiError, or nil if none found.
func (m *DeleteSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSubscriptionResponseMultiError(errors)
	}
	return nil
}

// DeleteSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteSubscriptionResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubscriptionResponseMultiError) AllErrors() []error { return m }

// DeleteSubscriptionResponseValidationError is the validation error returned
// by DeleteSubscriptionResponse.Validate if the designated constraints aren't met.
type DeleteSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubscriptionResponseValidationError) ErrorName() string {
	return "DeleteSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubscriptionResponseValidationError{}

// Validate checks the field values on Receiver with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Receiver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Receiver with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReceiverMultiError, or nil
// if none found.
func (m *Receiver) ValidateAll() error {
	return m.validate(true)
}

func (m *Receiver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetConfigurations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiverValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiverValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiverValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiverValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiverValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiverValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiverValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiverValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiverValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReceiverMultiError(errors)
	}
	return nil
}

// ReceiverMultiError is an error wrapping multiple validation errors returned
// by Receiver.ValidateAll() if the designated constraints aren't met.
type ReceiverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiverMultiError) AllErrors() []error { return m }

// ReceiverValidationError is the validation error returned by
// Receiver.Validate if the designated constraints aren't met.
type ReceiverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiverValidationError) ErrorName() string { return "ReceiverValidationError" }

// Error satisfies the builtin error interface
func (e ReceiverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiverValidationError{}

// Validate checks the field values on ListReceiversRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReceiversRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReceiversRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReceiversRequestMultiError, or nil if none found.
func (m *ListReceiversRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReceiversRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListReceiversRequestMultiError(errors)
	}
	return nil
}

// ListReceiversRequestMultiError is an error wrapping multiple validation
// errors returned by ListReceiversRequest.ValidateAll() if the designated
// constraints aren't met.
type ListReceiversRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReceiversRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReceiversRequestMultiError) AllErrors() []error { return m }

// ListReceiversRequestValidationError is the validation error returned by
// ListReceiversRequest.Validate if the designated constraints aren't met.
type ListReceiversRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReceiversRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReceiversRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReceiversRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReceiversRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReceiversRequestValidationError) ErrorName() string {
	return "ListReceiversRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReceiversRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReceiversRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReceiversRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReceiversRequestValidationError{}

// Validate checks the field values on ListReceiversResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReceiversResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReceiversResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReceiversResponseMultiError, or nil if none found.
func (m *ListReceiversResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReceiversResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReceivers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReceiversResponseValidationError{
						field:  fmt.Sprintf("Receivers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReceiversResponseValidationError{
						field:  fmt.Sprintf("Receivers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReceiversResponseValidationError{
					field:  fmt.Sprintf("Receivers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListReceiversResponseMultiError(errors)
	}
	return nil
}

// ListReceiversResponseMultiError is an error wrapping multiple validation
// errors returned by ListReceiversResponse.ValidateAll() if the designated
// constraints aren't met.
type ListReceiversResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReceiversResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReceiversResponseMultiError) AllErrors() []error { return m }

// ListReceiversResponseValidationError is the validation error returned by
// ListReceiversResponse.Validate if the designated constraints aren't met.
type ListReceiversResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReceiversResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReceiversResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReceiversResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReceiversResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReceiversResponseValidationError) ErrorName() string {
	return "ListReceiversResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReceiversResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReceiversResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReceiversResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReceiversResponseValidationError{}

// Validate checks the field values on CreateReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReceiverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReceiverRequestMultiError, or nil if none found.
func (m *CreateReceiverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReceiverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateReceiverRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateReceiverRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_.-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetConfigurations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReceiverRequestValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReceiverRequestValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReceiverRequestValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReceiverRequestMultiError(errors)
	}
	return nil
}

// CreateReceiverRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReceiverRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReceiverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReceiverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReceiverRequestMultiError) AllErrors() []error { return m }

// CreateReceiverRequestValidationError is the validation error returned by
// CreateReceiverRequest.Validate if the designated constraints aren't met.
type CreateReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReceiverRequestValidationError) ErrorName() string {
	return "CreateReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReceiverRequestValidationError{}

var _CreateReceiverRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_.-]+$")

// Validate checks the field values on CreateReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReceiverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReceiverResponseMultiError, or nil if none found.
func (m *CreateReceiverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReceiverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateReceiverResponseMultiError(errors)
	}
	return nil
}

// CreateReceiverResponseMultiError is an error wrapping multiple validation
// errors returned by CreateReceiverResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReceiverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReceiverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReceiverResponseMultiError) AllErrors() []error { return m }

// CreateReceiverResponseValidationError is the validation error returned by
// CreateReceiverResponse.Validate if the designated constraints aren't met.
type CreateReceiverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReceiverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReceiverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReceiverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReceiverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReceiverResponseValidationError) ErrorName() string {
	return "CreateReceiverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReceiverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReceiverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReceiverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReceiverResponseValidationError{}

// Validate checks the field values on GetReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceiverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceiverRequestMultiError, or nil if none found.
func (m *GetReceiverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceiverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetReceiverRequestMultiError(errors)
	}
	return nil
}

// GetReceiverRequestMultiError is an error wrapping multiple validation errors
// returned by GetReceiverRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReceiverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceiverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceiverRequestMultiError) AllErrors() []error { return m }

// GetReceiverRequestValidationError is the validation error returned by
// GetReceiverRequest.Validate if the designated constraints aren't met.
type GetReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceiverRequestValidationError) ErrorName() string {
	return "GetReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceiverRequestValidationError{}

// Validate checks the field values on GetReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceiverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceiverResponseMultiError, or nil if none found.
func (m *GetReceiverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceiverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceiverResponseValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceiverResponseValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceiverResponseValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceiverResponseMultiError(errors)
	}
	return nil
}

// GetReceiverResponseMultiError is an error wrapping multiple validation
// errors returned by GetReceiverResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReceiverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceiverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceiverResponseMultiError) AllErrors() []error { return m }

// GetReceiverResponseValidationError is the validation error returned by
// GetReceiverResponse.Validate if the designated constraints aren't met.
type GetReceiverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceiverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceiverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceiverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceiverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceiverResponseValidationError) ErrorName() string {
	return "GetReceiverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceiverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceiverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceiverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceiverResponseValidationError{}

// Validate checks the field values on UpdateReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReceiverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReceiverRequestMultiError, or nil if none found.
func (m *UpdateReceiverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReceiverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_UpdateReceiverRequest_Name_Pattern.MatchString(m.GetName()) {
		err := UpdateReceiverRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_.-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetConfigurations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceiverRequestValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceiverRequestValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceiverRequestValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReceiverRequestMultiError(errors)
	}
	return nil
}

// UpdateReceiverRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateReceiverRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateReceiverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReceiverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReceiverRequestMultiError) AllErrors() []error { return m }

// UpdateReceiverRequestValidationError is the validation error returned by
// UpdateReceiverRequest.Validate if the designated constraints aren't met.
type UpdateReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceiverRequestValidationError) ErrorName() string {
	return "UpdateReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceiverRequestValidationError{}

var _UpdateReceiverRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_.-]+$")

// Validate checks the field values on UpdateReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReceiverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReceiverResponseMultiError, or nil if none found.
func (m *UpdateReceiverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReceiverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateReceiverResponseMultiError(errors)
	}
	return nil
}

// UpdateReceiverResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateReceiverResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateReceiverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReceiverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReceiverResponseMultiError) AllErrors() []error { return m }

// UpdateReceiverResponseValidationError is the validation error returned by
// UpdateReceiverResponse.Validate if the designated constraints aren't met.
type UpdateReceiverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceiverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceiverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceiverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceiverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceiverResponseValidationError) ErrorName() string {
	return "UpdateReceiverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceiverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceiverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceiverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceiverResponseValidationError{}

// Validate checks the field values on DeleteReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReceiverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReceiverRequestMultiError, or nil if none found.
func (m *DeleteReceiverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReceiverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteReceiverRequestMultiError(errors)
	}
	return nil
}

// DeleteReceiverRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteReceiverRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteReceiverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReceiverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReceiverRequestMultiError) AllErrors() []error { return m }

// DeleteReceiverRequestValidationError is the validation error returned by
// DeleteReceiverRequest.Validate if the designated constraints aren't met.
type DeleteReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReceiverRequestValidationError) ErrorName() string {
	return "DeleteReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReceiverRequestValidationError{}

// Validate checks the field values on DeleteReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReceiverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReceiverResponseMultiError, or nil if none found.
func (m *DeleteReceiverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReceiverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteReceiverResponseMultiError(errors)
	}
	return nil
}

// DeleteReceiverResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteReceiverResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteReceiverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReceiverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReceiverResponseMultiError) AllErrors() []error { return m }

// DeleteReceiverResponseValidationError is the validation error returned by
// DeleteReceiverResponse.Validate if the designated constraints aren't met.
type DeleteReceiverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReceiverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReceiverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReceiverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReceiverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReceiverResponseValidationError) ErrorName() string {
	return "DeleteReceiverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReceiverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReceiverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReceiverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReceiverResponseValidationError{}

// Validate checks the field values on NotifyReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyReceiverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyReceiverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyReceiverRequestMultiError, or nil if none found.
func (m *NotifyReceiverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyReceiverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyReceiverRequestValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyReceiverRequestValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyReceiverRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifyReceiverRequestMultiError(errors)
	}
	return nil
}

// NotifyReceiverRequestMultiError is an error wrapping multiple validation
// errors returned by NotifyReceiverRequest.ValidateAll() if the designated
// constraints aren't met.
type NotifyReceiverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyReceiverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyReceiverRequestMultiError) AllErrors() []error { return m }

// NotifyReceiverRequestValidationError is the validation error returned by
// NotifyReceiverRequest.Validate if the designated constraints aren't met.
type NotifyReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyReceiverRequestValidationError) ErrorName() string {
	return "NotifyReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyReceiverRequestValidationError{}

// Validate checks the field values on NotifyReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyReceiverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyReceiverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyReceiverResponseMultiError, or nil if none found.
func (m *NotifyReceiverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyReceiverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotifyReceiverResponseMultiError(errors)
	}
	return nil
}

// NotifyReceiverResponseMultiError is an error wrapping multiple validation
// errors returned by NotifyReceiverResponse.ValidateAll() if the designated
// constraints aren't met.
type NotifyReceiverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyReceiverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyReceiverResponseMultiError) AllErrors() []error { return m }

// NotifyReceiverResponseValidationError is the validation error returned by
// NotifyReceiverResponse.Validate if the designated constraints aren't met.
type NotifyReceiverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyReceiverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyReceiverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyReceiverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyReceiverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyReceiverResponseValidationError) ErrorName() string {
	return "NotifyReceiverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyReceiverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyReceiverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyReceiverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyReceiverResponseValidationError{}

// Validate checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Alert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AlertMultiError, or nil if none found.
func (m *Alert) ValidateAll() error {
	return m.validate(true)
}

func (m *Alert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProviderId

	// no validation rules for ResourceName

	// no validation rules for MetricName

	// no validation rules for MetricValue

	// no validation rules for Severity

	// no validation rules for Rule

	if all {
		switch v := interface{}(m.GetTriggeredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggeredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertValidationError{
				field:  "TriggeredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AlertMultiError(errors)
	}
	return nil
}

// AlertMultiError is an error wrapping multiple validation errors returned by
// Alert.ValidateAll() if the designated constraints aren't met.
type AlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertMultiError) AllErrors() []error { return m }

// AlertValidationError is the validation error returned by Alert.Validate if
// the designated constraints aren't met.
type AlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertValidationError) ErrorName() string { return "AlertValidationError" }

// Error satisfies the builtin error interface
func (e AlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertValidationError{}

// Validate checks the field values on ListAlertsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAlertsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlertsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlertsRequestMultiError, or nil if none found.
func (m *ListAlertsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlertsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderType

	// no validation rules for ProviderId

	if !_ListAlertsRequest_ResourceName_Pattern.MatchString(m.GetResourceName()) {
		err := ListAlertsRequestValidationError{
			field:  "ResourceName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ListAlertsRequestMultiError(errors)
	}
	return nil
}

// ListAlertsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAlertsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAlertsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlertsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlertsRequestMultiError) AllErrors() []error { return m }

// ListAlertsRequestValidationError is the validation error returned by
// ListAlertsRequest.Validate if the designated constraints aren't met.
type ListAlertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertsRequestValidationError) ErrorName() string {
	return "ListAlertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertsRequestValidationError{}

var _ListAlertsRequest_ResourceName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListAlertsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAlertsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlertsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlertsResponseMultiError, or nil if none found.
func (m *ListAlertsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlertsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAlertsResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAlertsResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAlertsResponseValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAlertsResponseMultiError(errors)
	}
	return nil
}

// ListAlertsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAlertsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAlertsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlertsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlertsResponseMultiError) AllErrors() []error { return m }

// ListAlertsResponseValidationError is the validation error returned by
// ListAlertsResponse.Validate if the designated constraints aren't met.
type ListAlertsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertsResponseValidationError) ErrorName() string {
	return "ListAlertsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertsResponseValidationError{}

// Validate checks the field values on CortexAlert with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CortexAlert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CortexAlert with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CortexAlertMultiError, or
// nil if none found.
func (m *CortexAlert) ValidateAll() error {
	return m.validate(true)
}

func (m *CortexAlert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Annotations

	// no validation rules for Labels

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStartsAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CortexAlertValidationError{
					field:  "StartsAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CortexAlertValidationError{
					field:  "StartsAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartsAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CortexAlertValidationError{
				field:  "StartsAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndsAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CortexAlertValidationError{
					field:  "EndsAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CortexAlertValidationError{
					field:  "EndsAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndsAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CortexAlertValidationError{
				field:  "EndsAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GeneratorUrl

	// no validation rules for Fingerprint

	if len(errors) > 0 {
		return CortexAlertMultiError(errors)
	}
	return nil
}

// CortexAlertMultiError is an error wrapping multiple validation errors
// returned by CortexAlert.ValidateAll() if the designated constraints aren't met.
type CortexAlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CortexAlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CortexAlertMultiError) AllErrors() []error { return m }

// CortexAlertValidationError is the validation error returned by
// CortexAlert.Validate if the designated constraints aren't met.
type CortexAlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CortexAlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CortexAlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CortexAlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CortexAlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CortexAlertValidationError) ErrorName() string { return "CortexAlertValidationError" }

// Error satisfies the builtin error interface
func (e CortexAlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCortexAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CortexAlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CortexAlertValidationError{}

// Validate checks the field values on CreateCortexAlertsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCortexAlertsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCortexAlertsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCortexAlertsRequestMultiError, or nil if none found.
func (m *CreateCortexAlertsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCortexAlertsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCortexAlertsRequestValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCortexAlertsRequestValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCortexAlertsRequestValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GroupKey

	// no validation rules for ExternalUrl

	// no validation rules for Version

	if len(errors) > 0 {
		return CreateCortexAlertsRequestMultiError(errors)
	}
	return nil
}

// CreateCortexAlertsRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCortexAlertsRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateCortexAlertsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCortexAlertsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCortexAlertsRequestMultiError) AllErrors() []error { return m }

// CreateCortexAlertsRequestValidationError is the validation error returned by
// CreateCortexAlertsRequest.Validate if the designated constraints aren't met.
type CreateCortexAlertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCortexAlertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCortexAlertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCortexAlertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCortexAlertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCortexAlertsRequestValidationError) ErrorName() string {
	return "CreateCortexAlertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCortexAlertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCortexAlertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCortexAlertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCortexAlertsRequestValidationError{}

// Validate checks the field values on CreateCortexAlertsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCortexAlertsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCortexAlertsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCortexAlertsResponseMultiError, or nil if none found.
func (m *CreateCortexAlertsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCortexAlertsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCortexAlertsResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCortexAlertsResponseValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCortexAlertsResponseValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCortexAlertsResponseMultiError(errors)
	}
	return nil
}

// CreateCortexAlertsResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCortexAlertsResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateCortexAlertsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCortexAlertsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCortexAlertsResponseMultiError) AllErrors() []error { return m }

// CreateCortexAlertsResponseValidationError is the validation error returned
// by CreateCortexAlertsResponse.Validate if the designated constraints aren't met.
type CreateCortexAlertsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCortexAlertsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCortexAlertsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCortexAlertsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCortexAlertsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCortexAlertsResponseValidationError) ErrorName() string {
	return "CreateCortexAlertsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCortexAlertsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCortexAlertsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCortexAlertsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCortexAlertsResponseValidationError{}

// Validate checks the field values on Annotations with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Annotations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Annotations with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnnotationsMultiError, or
// nil if none found.
func (m *Annotations) ValidateAll() error {
	return m.validate(true)
}

func (m *Annotations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricName

	// no validation rules for MetricValue

	// no validation rules for Resource

	// no validation rules for Template

	if len(errors) > 0 {
		return AnnotationsMultiError(errors)
	}
	return nil
}

// AnnotationsMultiError is an error wrapping multiple validation errors
// returned by Annotations.ValidateAll() if the designated constraints aren't met.
type AnnotationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnotationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnotationsMultiError) AllErrors() []error { return m }

// AnnotationsValidationError is the validation error returned by
// Annotations.Validate if the designated constraints aren't met.
type AnnotationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnotationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnotationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnotationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnotationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnotationsValidationError) ErrorName() string { return "AnnotationsValidationError" }

// Error satisfies the builtin error interface
func (e AnnotationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnotations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnotationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnotationsValidationError{}

// Validate checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Labels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LabelsMultiError, or nil if none found.
func (m *Labels) ValidateAll() error {
	return m.validate(true)
}

func (m *Labels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Severity

	if len(errors) > 0 {
		return LabelsMultiError(errors)
	}
	return nil
}

// LabelsMultiError is an error wrapping multiple validation errors returned by
// Labels.ValidateAll() if the designated constraints aren't met.
type LabelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelsMultiError) AllErrors() []error { return m }

// LabelsValidationError is the validation error returned by Labels.Validate if
// the designated constraints aren't met.
type LabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsValidationError) ErrorName() string { return "LabelsValidationError" }

// Error satisfies the builtin error interface
func (e LabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleMultiError, or nil if none found.
func (m *Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Enabled

	// no validation rules for GroupName

	// no validation rules for Namespace

	// no validation rules for Template

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetProviderNamespace() < 0 {
		err := RuleValidationError{
			field:  "ProviderNamespace",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RuleMultiError(errors)
	}
	return nil
}

// RuleMultiError is an error wrapping multiple validation errors returned by
// Rule.ValidateAll() if the designated constraints aren't met.
type RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleMultiError) AllErrors() []error { return m }

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on Variables with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Variables) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Variables with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VariablesMultiError, or nil
// if none found.
func (m *Variables) ValidateAll() error {
	return m.validate(true)
}

func (m *Variables) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Variables_Name_Pattern.MatchString(m.GetName()) {
		err := VariablesValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	// no validation rules for Type

	// no validation rules for Description

	if len(errors) > 0 {
		return VariablesMultiError(errors)
	}
	return nil
}

// VariablesMultiError is an error wrapping multiple validation errors returned
// by Variables.ValidateAll() if the designated constraints aren't met.
type VariablesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VariablesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VariablesMultiError) AllErrors() []error { return m }

// VariablesValidationError is the validation error returned by
// Variables.Validate if the designated constraints aren't met.
type VariablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariablesValidationError) ErrorName() string { return "VariablesValidationError" }

// Error satisfies the builtin error interface
func (e VariablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariablesValidationError{}

var _Variables_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListRulesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesRequestMultiError, or nil if none found.
func (m *ListRulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for GroupName

	// no validation rules for Template

	// no validation rules for ProviderNamespace

	if len(errors) > 0 {
		return ListRulesRequestMultiError(errors)
	}
	return nil
}

// ListRulesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRulesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesRequestMultiError) AllErrors() []error { return m }

// ListRulesRequestValidationError is the validation error returned by
// ListRulesRequest.Validate if the designated constraints aren't met.
type ListRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesRequestValidationError) ErrorName() string { return "ListRulesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesRequestValidationError{}

// Validate checks the field values on ListRulesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesResponseMultiError, or nil if none found.
func (m *ListRulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRulesResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRulesResponseMultiError(errors)
	}
	return nil
}

// ListRulesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRulesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesResponseMultiError) AllErrors() []error { return m }

// ListRulesResponseValidationError is the validation error returned by
// ListRulesResponse.Validate if the designated constraints aren't met.
type ListRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesResponseValidationError) ErrorName() string {
	return "ListRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesResponseValidationError{}

// Validate checks the field values on UpdateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleRequestMultiError, or nil if none found.
func (m *UpdateRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if !_UpdateRuleRequest_GroupName_Pattern.MatchString(m.GetGroupName()) {
		err := UpdateRuleRequestValidationError{
			field:  "GroupName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateRuleRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := UpdateRuleRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateRuleRequest_Template_Pattern.MatchString(m.GetTemplate()) {
		err := UpdateRuleRequestValidationError{
			field:  "Template",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRuleRequestValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRuleRequestValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRuleRequestValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ProviderNamespace

	if len(errors) > 0 {
		return UpdateRuleRequestMultiError(errors)
	}
	return nil
}

// UpdateRuleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleRequestMultiError) AllErrors() []error { return m }

// UpdateRuleRequestValidationError is the validation error returned by
// UpdateRuleRequest.Validate if the designated constraints aren't met.
type UpdateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleRequestValidationError) ErrorName() string {
	return "UpdateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleRequestValidationError{}

var _UpdateRuleRequest_GroupName_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Namespace_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _UpdateRuleRequest_Template_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on UpdateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleResponseMultiError, or nil if none found.
func (m *UpdateRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateRuleResponseMultiError(errors)
	}
	return nil
}

// UpdateRuleResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRuleResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleResponseMultiError) AllErrors() []error { return m }

// UpdateRuleResponseValidationError is the validation error returned by
// UpdateRuleResponse.Validate if the designated constraints aren't met.
type UpdateRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleResponseValidationError) ErrorName() string {
	return "UpdateRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleResponseValidationError{}

// Validate checks the field values on TemplateVariables with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TemplateVariables) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateVariables with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemplateVariablesMultiError, or nil if none found.
func (m *TemplateVariables) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateVariables) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_TemplateVariables_Name_Pattern.MatchString(m.GetName()) {
		err := TemplateVariablesValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_TemplateVariables_Type_Pattern.MatchString(m.GetType()) {
		err := TemplateVariablesValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Default

	// no validation rules for Description

	if len(errors) > 0 {
		return TemplateVariablesMultiError(errors)
	}
	return nil
}

// TemplateVariablesMultiError is an error wrapping multiple validation errors
// returned by TemplateVariables.ValidateAll() if the designated constraints
// aren't met.
type TemplateVariablesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateVariablesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateVariablesMultiError) AllErrors() []error { return m }

// TemplateVariablesValidationError is the validation error returned by
// TemplateVariables.Validate if the designated constraints aren't met.
type TemplateVariablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateVariablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateVariablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateVariablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateVariablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateVariablesValidationError) ErrorName() string {
	return "TemplateVariablesValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateVariablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateVariables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateVariablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateVariablesValidationError{}

var _TemplateVariables_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _TemplateVariables_Type_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on Template with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Template) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Template with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplateMultiError, or nil
// if none found.
func (m *Template) ValidateAll() error {
	return m.validate(true)
}

func (m *Template) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_Template_Name_Pattern.MatchString(m.GetName()) {
		err := TemplateValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Template_Body_Pattern.MatchString(m.GetBody()) {
		err := TemplateValidationError{
			field:  "Body",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) < 1 {
		err := TemplateValidationError{
			field:  "Tags",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetVariables()) < 1 {
		err := TemplateValidationError{
			field:  "Variables",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TemplateValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TemplateMultiError(errors)
	}
	return nil
}

// TemplateMultiError is an error wrapping multiple validation errors returned
// by Template.ValidateAll() if the designated constraints aren't met.
type TemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateMultiError) AllErrors() []error { return m }

// TemplateValidationError is the validation error returned by
// Template.Validate if the designated constraints aren't met.
type TemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateValidationError) ErrorName() string { return "TemplateValidationError" }

// Error satisfies the builtin error interface
func (e TemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateValidationError{}

var _Template_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

var _Template_Body_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesRequestMultiError, or nil if none found.
func (m *ListTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tag

	if len(errors) > 0 {
		return ListTemplatesRequestMultiError(errors)
	}
	return nil
}

// ListTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesRequestMultiError) AllErrors() []error { return m }

// ListTemplatesRequestValidationError is the validation error returned by
// ListTemplatesRequest.Validate if the designated constraints aren't met.
type ListTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesRequestValidationError) ErrorName() string {
	return "ListTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesRequestValidationError{}

// Validate checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesResponseMultiError, or nil if none found.
func (m *ListTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplatesResponseMultiError(errors)
	}
	return nil
}

// ListTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesResponseMultiError) AllErrors() []error { return m }

// ListTemplatesResponseValidationError is the validation error returned by
// ListTemplatesResponse.Validate if the designated constraints aren't met.
type ListTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesResponseValidationError) ErrorName() string {
	return "ListTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesResponseValidationError{}

// Validate checks the field values on UpsertTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertTemplateRequestMultiError, or nil if none found.
func (m *UpsertTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_UpsertTemplateRequest_Name_Pattern.MatchString(m.GetName()) {
		err := UpsertTemplateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Body

	if len(m.GetTags()) < 1 {
		err := UpsertTemplateRequestValidationError{
			field:  "Tags",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetVariables()) < 1 {
		err := UpsertTemplateRequestValidationError{
			field:  "Variables",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertTemplateRequestValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertTemplateRequestValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertTemplateRequestValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertTemplateRequestMultiError(errors)
	}
	return nil
}

// UpsertTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertTemplateRequestMultiError) AllErrors() []error { return m }

// UpsertTemplateRequestValidationError is the validation error returned by
// UpsertTemplateRequest.Validate if the designated constraints aren't met.
type UpsertTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertTemplateRequestValidationError) ErrorName() string {
	return "UpsertTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertTemplateRequestValidationError{}

var _UpsertTemplateRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on UpsertTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertTemplateResponseMultiError, or nil if none found.
func (m *UpsertTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpsertTemplateResponseMultiError(errors)
	}
	return nil
}

// UpsertTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertTemplateResponseMultiError) AllErrors() []error { return m }

// UpsertTemplateResponseValidationError is the validation error returned by
// UpsertTemplateResponse.Validate if the designated constraints aren't met.
type UpsertTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertTemplateResponseValidationError) ErrorName() string {
	return "UpsertTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertTemplateResponseValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetTemplateRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetTemplateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}
	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

var _GetTemplateRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateResponseMultiError, or nil if none found.
func (m *GetTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTemplateResponseMultiError(errors)
	}
	return nil
}

// GetTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateResponseMultiError) AllErrors() []error { return m }

// GetTemplateResponseValidationError is the validation error returned by
// GetTemplateResponse.Validate if the designated constraints aren't met.
type GetTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateResponseValidationError) ErrorName() string {
	return "GetTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateResponseValidationError{}

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateRequestMultiError, or nil if none found.
func (m *DeleteTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteTemplateRequestMultiError(errors)
	}
	return nil
}

// DeleteTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateResponseMultiError, or nil if none found.
func (m *DeleteTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTemplateResponseMultiError(errors)
	}
	return nil
}

// DeleteTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteTemplateResponseValidationError is the validation error returned by
// DeleteTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateResponseValidationError) ErrorName() string {
	return "DeleteTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateResponseValidationError{}

// Validate checks the field values on RenderTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderTemplateRequestMultiError, or nil if none found.
func (m *RenderTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RenderTemplateRequest_Name_Pattern.MatchString(m.GetName()) {
		err := RenderTemplateRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Variables

	if len(errors) > 0 {
		return RenderTemplateRequestMultiError(errors)
	}
	return nil
}

// RenderTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by RenderTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type RenderTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderTemplateRequestMultiError) AllErrors() []error { return m }

// RenderTemplateRequestValidationError is the validation error returned by
// RenderTemplateRequest.Validate if the designated constraints aren't met.
type RenderTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderTemplateRequestValidationError) ErrorName() string {
	return "RenderTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderTemplateRequestValidationError{}

var _RenderTemplateRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on RenderTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderTemplateResponseMultiError, or nil if none found.
func (m *RenderTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Body

	if len(errors) > 0 {
		return RenderTemplateResponseMultiError(errors)
	}
	return nil
}

// RenderTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by RenderTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type RenderTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderTemplateResponseMultiError) AllErrors() []error { return m }

// RenderTemplateResponseValidationError is the validation error returned by
// RenderTemplateResponse.Validate if the designated constraints aren't met.
type RenderTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderTemplateResponseValidationError) ErrorName() string {
	return "RenderTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderTemplateResponseValidationError{}
