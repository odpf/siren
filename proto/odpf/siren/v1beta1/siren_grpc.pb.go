// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sirenv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SirenServiceClient is the client API for SirenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SirenServiceClient interface {
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*CreateProviderResponse, error)
	GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*GetProviderResponse, error)
	UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*UpdateProviderResponse, error)
	DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error)
	NotifyReceiver(ctx context.Context, in *NotifyReceiverRequest, opts ...grpc.CallOption) (*NotifyReceiverResponse, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error)
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error)
	ListReceivers(ctx context.Context, in *ListReceiversRequest, opts ...grpc.CallOption) (*ListReceiversResponse, error)
	CreateReceiver(ctx context.Context, in *CreateReceiverRequest, opts ...grpc.CallOption) (*CreateReceiverResponse, error)
	GetReceiver(ctx context.Context, in *GetReceiverRequest, opts ...grpc.CallOption) (*GetReceiverResponse, error)
	UpdateReceiver(ctx context.Context, in *UpdateReceiverRequest, opts ...grpc.CallOption) (*UpdateReceiverResponse, error)
	DeleteReceiver(ctx context.Context, in *DeleteReceiverRequest, opts ...grpc.CallOption) (*DeleteReceiverResponse, error)
	ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error)
	CreateAlerts(ctx context.Context, in *CreateAlertsRequest, opts ...grpc.CallOption) (*CreateAlertsResponse, error)
	CreateAlertsWithNamespace(ctx context.Context, in *CreateAlertsWithNamespaceRequest, opts ...grpc.CallOption) (*CreateAlertsWithNamespaceResponse, error)
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error)
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*UpsertTemplateResponse, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
	RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error)
	CreateSilence(ctx context.Context, in *CreateSilenceRequest, opts ...grpc.CallOption) (*CreateSilenceResponse, error)
	ListSilences(ctx context.Context, in *ListSilencesRequest, opts ...grpc.CallOption) (*ListSilencesResponse, error)
	GetSilence(ctx context.Context, in *GetSilenceRequest, opts ...grpc.CallOption) (*GetSilenceResponse, error)
	ExpireSilence(ctx context.Context, in *ExpireSilenceRequest, opts ...grpc.CallOption) (*ExpireSilenceResponse, error)
}

type sirenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSirenServiceClient(cc grpc.ClientConnInterface) SirenServiceClient {
	return &sirenServiceClient{cc}
}

func (c *sirenServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/ListProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*CreateProviderResponse, error) {
	out := new(CreateProviderResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/CreateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*GetProviderResponse, error) {
	out := new(GetProviderResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/GetProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*UpdateProviderResponse, error) {
	out := new(UpdateProviderResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/UpdateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error) {
	out := new(DeleteProviderResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/DeleteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) NotifyReceiver(ctx context.Context, in *NotifyReceiverRequest, opts ...grpc.CallOption) (*NotifyReceiverResponse, error) {
	out := new(NotifyReceiverResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/NotifyReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	out := new(CreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error) {
	out := new(UpdateSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	out := new(DeleteSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListReceivers(ctx context.Context, in *ListReceiversRequest, opts ...grpc.CallOption) (*ListReceiversResponse, error) {
	out := new(ListReceiversResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/ListReceivers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) CreateReceiver(ctx context.Context, in *CreateReceiverRequest, opts ...grpc.CallOption) (*CreateReceiverResponse, error) {
	out := new(CreateReceiverResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/CreateReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) GetReceiver(ctx context.Context, in *GetReceiverRequest, opts ...grpc.CallOption) (*GetReceiverResponse, error) {
	out := new(GetReceiverResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/GetReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) UpdateReceiver(ctx context.Context, in *UpdateReceiverRequest, opts ...grpc.CallOption) (*UpdateReceiverResponse, error) {
	out := new(UpdateReceiverResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/UpdateReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) DeleteReceiver(ctx context.Context, in *DeleteReceiverRequest, opts ...grpc.CallOption) (*DeleteReceiverResponse, error) {
	out := new(DeleteReceiverResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/DeleteReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error) {
	out := new(ListAlertsResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/ListAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) CreateAlerts(ctx context.Context, in *CreateAlertsRequest, opts ...grpc.CallOption) (*CreateAlertsResponse, error) {
	out := new(CreateAlertsResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/CreateAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) CreateAlertsWithNamespace(ctx context.Context, in *CreateAlertsWithNamespaceRequest, opts ...grpc.CallOption) (*CreateAlertsWithNamespaceResponse, error) {
	out := new(CreateAlertsWithNamespaceResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/CreateAlertsWithNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error) {
	out := new(UpdateRuleResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*UpsertTemplateResponse, error) {
	out := new(UpsertTemplateResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/UpsertTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error) {
	out := new(RenderTemplateResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/RenderTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) CreateSilence(ctx context.Context, in *CreateSilenceRequest, opts ...grpc.CallOption) (*CreateSilenceResponse, error) {
	out := new(CreateSilenceResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/CreateSilence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ListSilences(ctx context.Context, in *ListSilencesRequest, opts ...grpc.CallOption) (*ListSilencesResponse, error) {
	out := new(ListSilencesResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/ListSilences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) GetSilence(ctx context.Context, in *GetSilenceRequest, opts ...grpc.CallOption) (*GetSilenceResponse, error) {
	out := new(GetSilenceResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/GetSilence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sirenServiceClient) ExpireSilence(ctx context.Context, in *ExpireSilenceRequest, opts ...grpc.CallOption) (*ExpireSilenceResponse, error) {
	out := new(ExpireSilenceResponse)
	err := c.cc.Invoke(ctx, "/odpf.siren.v1beta1.SirenService/ExpireSilence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SirenServiceServer is the server API for SirenService service.
// All implementations must embed UnimplementedSirenServiceServer
// for forward compatibility
type SirenServiceServer interface {
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	CreateProvider(context.Context, *CreateProviderRequest) (*CreateProviderResponse, error)
	GetProvider(context.Context, *GetProviderRequest) (*GetProviderResponse, error)
	UpdateProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error)
	DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error)
	NotifyReceiver(context.Context, *NotifyReceiverRequest) (*NotifyReceiverResponse, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error)
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	ListReceivers(context.Context, *ListReceiversRequest) (*ListReceiversResponse, error)
	CreateReceiver(context.Context, *CreateReceiverRequest) (*CreateReceiverResponse, error)
	GetReceiver(context.Context, *GetReceiverRequest) (*GetReceiverResponse, error)
	UpdateReceiver(context.Context, *UpdateReceiverRequest) (*UpdateReceiverResponse, error)
	DeleteReceiver(context.Context, *DeleteReceiverRequest) (*DeleteReceiverResponse, error)
	ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error)
	CreateAlerts(context.Context, *CreateAlertsRequest) (*CreateAlertsResponse, error)
	CreateAlertsWithNamespace(context.Context, *CreateAlertsWithNamespaceRequest) (*CreateAlertsWithNamespaceResponse, error)
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error)
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	UpsertTemplate(context.Context, *UpsertTemplateRequest) (*UpsertTemplateResponse, error)
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error)
	CreateSilence(context.Context, *CreateSilenceRequest) (*CreateSilenceResponse, error)
	ListSilences(context.Context, *ListSilencesRequest) (*ListSilencesResponse, error)
	GetSilence(context.Context, *GetSilenceRequest) (*GetSilenceResponse, error)
	ExpireSilence(context.Context, *ExpireSilenceRequest) (*ExpireSilenceResponse, error)
	mustEmbedUnimplementedSirenServiceServer()
}

// UnimplementedSirenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSirenServiceServer struct {
}

func (UnimplementedSirenServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedSirenServiceServer) CreateProvider(context.Context, *CreateProviderRequest) (*CreateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedSirenServiceServer) GetProvider(context.Context, *GetProviderRequest) (*GetProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedSirenServiceServer) UpdateProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProvider not implemented")
}
func (UnimplementedSirenServiceServer) DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedSirenServiceServer) NotifyReceiver(context.Context, *NotifyReceiverRequest) (*NotifyReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyReceiver not implemented")
}
func (UnimplementedSirenServiceServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedSirenServiceServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedSirenServiceServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedSirenServiceServer) UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedSirenServiceServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedSirenServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedSirenServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedSirenServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedSirenServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (UnimplementedSirenServiceServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedSirenServiceServer) ListReceivers(context.Context, *ListReceiversRequest) (*ListReceiversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivers not implemented")
}
func (UnimplementedSirenServiceServer) CreateReceiver(context.Context, *CreateReceiverRequest) (*CreateReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceiver not implemented")
}
func (UnimplementedSirenServiceServer) GetReceiver(context.Context, *GetReceiverRequest) (*GetReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiver not implemented")
}
func (UnimplementedSirenServiceServer) UpdateReceiver(context.Context, *UpdateReceiverRequest) (*UpdateReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceiver not implemented")
}
func (UnimplementedSirenServiceServer) DeleteReceiver(context.Context, *DeleteReceiverRequest) (*DeleteReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReceiver not implemented")
}
func (UnimplementedSirenServiceServer) ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}
func (UnimplementedSirenServiceServer) CreateAlerts(context.Context, *CreateAlertsRequest) (*CreateAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlerts not implemented")
}
func (UnimplementedSirenServiceServer) CreateAlertsWithNamespace(context.Context, *CreateAlertsWithNamespaceRequest) (*CreateAlertsWithNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertsWithNamespace not implemented")
}
func (UnimplementedSirenServiceServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (UnimplementedSirenServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedSirenServiceServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedSirenServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedSirenServiceServer) UpsertTemplate(context.Context, *UpsertTemplateRequest) (*UpsertTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTemplate not implemented")
}
func (UnimplementedSirenServiceServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedSirenServiceServer) RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderTemplate not implemented")
}
func (UnimplementedSirenServiceServer) CreateSilence(context.Context, *CreateSilenceRequest) (*CreateSilenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSilence not implemented")
}
func (UnimplementedSirenServiceServer) ListSilences(context.Context, *ListSilencesRequest) (*ListSilencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSilences not implemented")
}
func (UnimplementedSirenServiceServer) GetSilence(context.Context, *GetSilenceRequest) (*GetSilenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSilence not implemented")
}
func (UnimplementedSirenServiceServer) ExpireSilence(context.Context, *ExpireSilenceRequest) (*ExpireSilenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireSilence not implemented")
}
func (UnimplementedSirenServiceServer) mustEmbedUnimplementedSirenServiceServer() {}

// UnsafeSirenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SirenServiceServer will
// result in compilation errors.
type UnsafeSirenServiceServer interface {
	mustEmbedUnimplementedSirenServiceServer()
}

func RegisterSirenServiceServer(s grpc.ServiceRegistrar, srv SirenServiceServer) {
	s.RegisterService(&SirenService_ServiceDesc, srv)
}

func _SirenService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/ListProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/CreateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).CreateProvider(ctx, req.(*CreateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/GetProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).GetProvider(ctx, req.(*GetProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_UpdateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).UpdateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/UpdateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).UpdateProvider(ctx, req.(*UpdateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/DeleteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).DeleteProvider(ctx, req.(*DeleteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_NotifyReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).NotifyReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/NotifyReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).NotifyReceiver(ctx, req.(*NotifyReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListReceivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReceiversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListReceivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/ListReceivers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListReceivers(ctx, req.(*ListReceiversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_CreateReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).CreateReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/CreateReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).CreateReceiver(ctx, req.(*CreateReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_GetReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).GetReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/GetReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).GetReceiver(ctx, req.(*GetReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_UpdateReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).UpdateReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/UpdateReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).UpdateReceiver(ctx, req.(*UpdateReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_DeleteReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).DeleteReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/DeleteReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).DeleteReceiver(ctx, req.(*DeleteReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/ListAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListAlerts(ctx, req.(*ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_CreateAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).CreateAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/CreateAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).CreateAlerts(ctx, req.(*CreateAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_CreateAlertsWithNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertsWithNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).CreateAlertsWithNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/CreateAlertsWithNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).CreateAlertsWithNamespace(ctx, req.(*CreateAlertsWithNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_UpsertTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).UpsertTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/UpsertTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).UpsertTemplate(ctx, req.(*UpsertTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_RenderTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).RenderTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/RenderTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).RenderTemplate(ctx, req.(*RenderTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_CreateSilence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSilenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).CreateSilence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/CreateSilence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).CreateSilence(ctx, req.(*CreateSilenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ListSilences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSilencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ListSilences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/ListSilences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ListSilences(ctx, req.(*ListSilencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_GetSilence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSilenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).GetSilence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/GetSilence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).GetSilence(ctx, req.(*GetSilenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SirenService_ExpireSilence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireSilenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SirenServiceServer).ExpireSilence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.siren.v1beta1.SirenService/ExpireSilence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SirenServiceServer).ExpireSilence(ctx, req.(*ExpireSilenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SirenService_ServiceDesc is the grpc.ServiceDesc for SirenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SirenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.siren.v1beta1.SirenService",
	HandlerType: (*SirenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProviders",
			Handler:    _SirenService_ListProviders_Handler,
		},
		{
			MethodName: "CreateProvider",
			Handler:    _SirenService_CreateProvider_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _SirenService_GetProvider_Handler,
		},
		{
			MethodName: "UpdateProvider",
			Handler:    _SirenService_UpdateProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _SirenService_DeleteProvider_Handler,
		},
		{
			MethodName: "NotifyReceiver",
			Handler:    _SirenService_NotifyReceiver_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _SirenService_ListNamespaces_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _SirenService_CreateNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _SirenService_GetNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _SirenService_UpdateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _SirenService_DeleteNamespace_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _SirenService_ListSubscriptions_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _SirenService_CreateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _SirenService_GetSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _SirenService_UpdateSubscription_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _SirenService_DeleteSubscription_Handler,
		},
		{
			MethodName: "ListReceivers",
			Handler:    _SirenService_ListReceivers_Handler,
		},
		{
			MethodName: "CreateReceiver",
			Handler:    _SirenService_CreateReceiver_Handler,
		},
		{
			MethodName: "GetReceiver",
			Handler:    _SirenService_GetReceiver_Handler,
		},
		{
			MethodName: "UpdateReceiver",
			Handler:    _SirenService_UpdateReceiver_Handler,
		},
		{
			MethodName: "DeleteReceiver",
			Handler:    _SirenService_DeleteReceiver_Handler,
		},
		{
			MethodName: "ListAlerts",
			Handler:    _SirenService_ListAlerts_Handler,
		},
		{
			MethodName: "CreateAlerts",
			Handler:    _SirenService_CreateAlerts_Handler,
		},
		{
			MethodName: "CreateAlertsWithNamespace",
			Handler:    _SirenService_CreateAlertsWithNamespace_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _SirenService_ListRules_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _SirenService_UpdateRule_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _SirenService_ListTemplates_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _SirenService_GetTemplate_Handler,
		},
		{
			MethodName: "UpsertTemplate",
			Handler:    _SirenService_UpsertTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _SirenService_DeleteTemplate_Handler,
		},
		{
			MethodName: "RenderTemplate",
			Handler:    _SirenService_RenderTemplate_Handler,
		},
		{
			MethodName: "CreateSilence",
			Handler:    _SirenService_CreateSilence_Handler,
		},
		{
			MethodName: "ListSilences",
			Handler:    _SirenService_ListSilences_Handler,
		},
		{
			MethodName: "GetSilence",
			Handler:    _SirenService_GetSilence_Handler,
		},
		{
			MethodName: "ExpireSilence",
			Handler:    _SirenService_ExpireSilence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/siren/v1beta1/siren.proto",
}
