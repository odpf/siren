// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	slack "github.com/odpf/siren/pkg/slack"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SlackNotifierService is an autogenerated mock type for the SlackNotifierService type
type SlackNotifierService struct {
	mock.Mock
}

type SlackNotifierService_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackNotifierService) EXPECT() *SlackNotifierService_Expecter {
	return &SlackNotifierService_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: _a0, _a1
func (_m *SlackNotifierService) Notify(_a0 *slack.Message, _a1 ...slack.ClientCallOption) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*slack.Message, ...slack.ClientCallOption) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackNotifierService_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type SlackNotifierService_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//  - _a0 *slack.Message
//  - _a1 ...slack.ClientCallOption
func (_e *SlackNotifierService_Expecter) Notify(_a0 interface{}, _a1 ...interface{}) *SlackNotifierService_Notify_Call {
	return &SlackNotifierService_Notify_Call{Call: _e.mock.On("Notify",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *SlackNotifierService_Notify_Call) Run(run func(_a0 *slack.Message, _a1 ...slack.ClientCallOption)) *SlackNotifierService_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slack.ClientCallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(slack.ClientCallOption)
			}
		}
		run(args[0].(*slack.Message), variadicArgs...)
	})
	return _c
}

func (_c *SlackNotifierService_Notify_Call) Return(_a0 error) *SlackNotifierService_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewSlackNotifierService creates a new instance of SlackNotifierService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackNotifierService(t testing.TB) *SlackNotifierService {
	mock := &SlackNotifierService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
