// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	slack "github.com/odpf/siren/plugins/receivers/slack"
	mock "github.com/stretchr/testify/mock"
)

// SlackNotifierService is an autogenerated mock type for the SlackNotifierService type
type SlackNotifierService struct {
	mock.Mock
}

type SlackNotifierService_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackNotifierService) EXPECT() *SlackNotifierService_Expecter {
	return &SlackNotifierService_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: _a0
func (_m *SlackNotifierService) Notify(_a0 *slack.SlackMessage) (*slack.SlackMessageSendResponse, error) {
	ret := _m.Called(_a0)

	var r0 *slack.SlackMessageSendResponse
	if rf, ok := ret.Get(0).(func(*slack.SlackMessage) *slack.SlackMessageSendResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.SlackMessageSendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*slack.SlackMessage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackNotifierService_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type SlackNotifierService_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//  - _a0 *slack.SlackMessage
func (_e *SlackNotifierService_Expecter) Notify(_a0 interface{}) *SlackNotifierService_Notify_Call {
	return &SlackNotifierService_Notify_Call{Call: _e.mock.On("Notify", _a0)}
}

func (_c *SlackNotifierService_Notify_Call) Run(run func(_a0 *slack.SlackMessage)) *SlackNotifierService_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slack.SlackMessage))
	})
	return _c
}

func (_c *SlackNotifierService_Notify_Call) Return(_a0 *slack.SlackMessageSendResponse, _a1 error) *SlackNotifierService_Notify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewSlackNotifierService creates a new instance of SlackNotifierService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackNotifierService(t testing.TB) *SlackNotifierService {
	mock := &SlackNotifierService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
