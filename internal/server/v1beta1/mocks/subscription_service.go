// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	subscription "github.com/odpf/siren/core/subscription"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SubscriptionService is an autogenerated mock type for the SubscriptionService type
type SubscriptionService struct {
	mock.Mock
}

type SubscriptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscriptionService) EXPECT() *SubscriptionService_Expecter {
	return &SubscriptionService_Expecter{mock: &_m.Mock}
}

// CreateSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionService) CreateSubscription(_a0 context.Context, _a1 *subscription.Subscription) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscription.Subscription) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionService_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type SubscriptionService_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *subscription.Subscription
func (_e *SubscriptionService_Expecter) CreateSubscription(_a0 interface{}, _a1 interface{}) *SubscriptionService_CreateSubscription_Call {
	return &SubscriptionService_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", _a0, _a1)}
}

func (_c *SubscriptionService_CreateSubscription_Call) Run(run func(_a0 context.Context, _a1 *subscription.Subscription)) *SubscriptionService_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscription.Subscription))
	})
	return _c
}

func (_c *SubscriptionService_CreateSubscription_Call) Return(_a0 error) *SubscriptionService_CreateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionService) DeleteSubscription(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionService_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type SubscriptionService_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 uint64
func (_e *SubscriptionService_Expecter) DeleteSubscription(_a0 interface{}, _a1 interface{}) *SubscriptionService_DeleteSubscription_Call {
	return &SubscriptionService_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", _a0, _a1)}
}

func (_c *SubscriptionService_DeleteSubscription_Call) Run(run func(_a0 context.Context, _a1 uint64)) *SubscriptionService_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *SubscriptionService_DeleteSubscription_Call) Return(_a0 error) *SubscriptionService_DeleteSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionService) GetSubscription(_a0 context.Context, _a1 uint64) (*subscription.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *subscription.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscription.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriptionService_GetSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscription'
type SubscriptionService_GetSubscription_Call struct {
	*mock.Call
}

// GetSubscription is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 uint64
func (_e *SubscriptionService_Expecter) GetSubscription(_a0 interface{}, _a1 interface{}) *SubscriptionService_GetSubscription_Call {
	return &SubscriptionService_GetSubscription_Call{Call: _e.mock.On("GetSubscription", _a0, _a1)}
}

func (_c *SubscriptionService_GetSubscription_Call) Run(run func(_a0 context.Context, _a1 uint64)) *SubscriptionService_GetSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *SubscriptionService_GetSubscription_Call) Return(_a0 *subscription.Subscription, _a1 error) *SubscriptionService_GetSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListSubscriptions provides a mock function with given fields: _a0
func (_m *SubscriptionService) ListSubscriptions(_a0 context.Context) ([]*subscription.Subscription, error) {
	ret := _m.Called(_a0)

	var r0 []*subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context) []*subscription.Subscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*subscription.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriptionService_ListSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptions'
type SubscriptionService_ListSubscriptions_Call struct {
	*mock.Call
}

// ListSubscriptions is a helper method to define mock.On call
//  - _a0 context.Context
func (_e *SubscriptionService_Expecter) ListSubscriptions(_a0 interface{}) *SubscriptionService_ListSubscriptions_Call {
	return &SubscriptionService_ListSubscriptions_Call{Call: _e.mock.On("ListSubscriptions", _a0)}
}

func (_c *SubscriptionService_ListSubscriptions_Call) Run(run func(_a0 context.Context)) *SubscriptionService_ListSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SubscriptionService_ListSubscriptions_Call) Return(_a0 []*subscription.Subscription, _a1 error) *SubscriptionService_ListSubscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Migrate provides a mock function with given fields:
func (_m *SubscriptionService) Migrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionService_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type SubscriptionService_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
func (_e *SubscriptionService_Expecter) Migrate() *SubscriptionService_Migrate_Call {
	return &SubscriptionService_Migrate_Call{Call: _e.mock.On("Migrate")}
}

func (_c *SubscriptionService_Migrate_Call) Run(run func()) *SubscriptionService_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SubscriptionService_Migrate_Call) Return(_a0 error) *SubscriptionService_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionService) UpdateSubscription(_a0 context.Context, _a1 *subscription.Subscription) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscription.Subscription) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionService_UpdateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscription'
type SubscriptionService_UpdateSubscription_Call struct {
	*mock.Call
}

// UpdateSubscription is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *subscription.Subscription
func (_e *SubscriptionService_Expecter) UpdateSubscription(_a0 interface{}, _a1 interface{}) *SubscriptionService_UpdateSubscription_Call {
	return &SubscriptionService_UpdateSubscription_Call{Call: _e.mock.On("UpdateSubscription", _a0, _a1)}
}

func (_c *SubscriptionService_UpdateSubscription_Call) Run(run func(_a0 context.Context, _a1 *subscription.Subscription)) *SubscriptionService_UpdateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscription.Subscription))
	})
	return _c
}

func (_c *SubscriptionService_UpdateSubscription_Call) Return(_a0 error) *SubscriptionService_UpdateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewSubscriptionService creates a new instance of SubscriptionService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriptionService(t testing.TB) *SubscriptionService {
	mock := &SubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
