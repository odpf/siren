// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	alert "github.com/odpf/siren/core/alert"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AlertService is an autogenerated mock type for the AlertService type
type AlertService struct {
	mock.Mock
}

type AlertService_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertService) EXPECT() *AlertService_Expecter {
	return &AlertService_Expecter{mock: &_m.Mock}
}

// CreateAlerts provides a mock function with given fields: ctx, providerType, providerID, namespaceID, body
func (_m *AlertService) CreateAlerts(ctx context.Context, providerType string, providerID uint64, namespaceID uint64, body map[string]interface{}) ([]*alert.Alert, int, error) {
	ret := _m.Called(ctx, providerType, providerID, namespaceID, body)

	var r0 []*alert.Alert
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, map[string]interface{}) []*alert.Alert); ok {
		r0 = rf(ctx, providerType, providerID, namespaceID, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*alert.Alert)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64, map[string]interface{}) int); ok {
		r1 = rf(ctx, providerType, providerID, namespaceID, body)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, uint64, uint64, map[string]interface{}) error); ok {
		r2 = rf(ctx, providerType, providerID, namespaceID, body)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AlertService_CreateAlerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlerts'
type AlertService_CreateAlerts_Call struct {
	*mock.Call
}

// CreateAlerts is a helper method to define mock.On call
//   - ctx context.Context
//   - providerType string
//   - providerID uint64
//   - namespaceID uint64
//   - body map[string]interface{}
func (_e *AlertService_Expecter) CreateAlerts(ctx interface{}, providerType interface{}, providerID interface{}, namespaceID interface{}, body interface{}) *AlertService_CreateAlerts_Call {
	return &AlertService_CreateAlerts_Call{Call: _e.mock.On("CreateAlerts", ctx, providerType, providerID, namespaceID, body)}
}

func (_c *AlertService_CreateAlerts_Call) Run(run func(ctx context.Context, providerType string, providerID uint64, namespaceID uint64, body map[string]interface{})) *AlertService_CreateAlerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64), args[4].(map[string]interface{}))
	})
	return _c
}

func (_c *AlertService_CreateAlerts_Call) Return(_a0 []*alert.Alert, _a1 int, _a2 error) *AlertService_CreateAlerts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *AlertService) List(_a0 context.Context, _a1 alert.Filter) ([]alert.Alert, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []alert.Alert
	if rf, ok := ret.Get(0).(func(context.Context, alert.Filter) []alert.Alert); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]alert.Alert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, alert.Filter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlertService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type AlertService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 alert.Filter
func (_e *AlertService_Expecter) List(_a0 interface{}, _a1 interface{}) *AlertService_List_Call {
	return &AlertService_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *AlertService_List_Call) Run(run func(_a0 context.Context, _a1 alert.Filter)) *AlertService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(alert.Filter))
	})
	return _c
}

func (_c *AlertService_List_Call) Return(_a0 []alert.Alert, _a1 error) *AlertService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewAlertService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAlertService creates a new instance of AlertService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAlertService(t mockConstructorTestingTNewAlertService) *AlertService {
	mock := &AlertService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
