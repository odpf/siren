// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	notification "github.com/odpf/siren/core/notification"
	mock "github.com/stretchr/testify/mock"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

type NotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationService) EXPECT() *NotificationService_Expecter {
	return &NotificationService_Expecter{mock: &_m.Mock}
}

// Dispatch provides a mock function with given fields: ctx, n
func (_m *NotificationService) Dispatch(ctx context.Context, n notification.Notification) error {
	ret := _m.Called(ctx, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, notification.Notification) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type NotificationService_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
//  - ctx context.Context
//  - n notification.Notification
func (_e *NotificationService_Expecter) Dispatch(ctx interface{}, n interface{}) *NotificationService_Dispatch_Call {
	return &NotificationService_Dispatch_Call{Call: _e.mock.On("Dispatch", ctx, n)}
}

func (_c *NotificationService_Dispatch_Call) Run(run func(ctx context.Context, n notification.Notification)) *NotificationService_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(notification.Notification))
	})
	return _c
}

func (_c *NotificationService_Dispatch_Call) Return(_a0 error) *NotificationService_Dispatch_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewNotificationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationService creates a new instance of NotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationService(t mockConstructorTestingTNewNotificationService) *NotificationService {
	mock := &NotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
