// Code generated by mockery 2.9.0. DO NOT EDIT.

package receiver

import (
	mock "github.com/stretchr/testify/mock"
	"net/http"
)

// MockExchanger is an autogenerated mock type for the Exchanger type
type MockExchanger struct {
	mock.Mock
}

// Exchange provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockExchanger) Exchange(_a0 string, _a1 string, _a2 string) (CodeExchangeHTTPResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 CodeExchangeHTTPResponse
	if rf, ok := ret.Get(0).(func(string, string, string) CodeExchangeHTTPResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(CodeExchangeHTTPResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}


// DoerMock is an autogenerated mock type for the Doer type
type DoerMock struct {
	mock.Mock
}

// Do provides a mock function with given fields: req
func (_m *DoerMock) Do(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
