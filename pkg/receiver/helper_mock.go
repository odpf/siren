// Code generated by mockery 2.9.0. DO NOT EDIT.

package receiver

import (
	domain "github.com/odpf/siren/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockSlackHelper is an autogenerated mock type for the SlackHelper type
type MockSlackHelper struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: _a0
func (_m *MockSlackHelper) Decrypt(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: _a0
func (_m *MockSlackHelper) Encrypt(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTransform provides a mock function with given fields: _a0
func (_m *MockSlackHelper) PostTransform(_a0 *Receiver) (*Receiver, error) {
	ret := _m.Called(_a0)

	var r0 *Receiver
	if rf, ok := ret.Get(0).(func(*Receiver) *Receiver); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Receiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Receiver) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreTransform provides a mock function with given fields: _a0
func (_m *MockSlackHelper) PreTransform(_a0 *domain.Receiver) (*domain.Receiver, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Receiver
	if rf, ok := ret.Get(0).(func(*domain.Receiver) *domain.Receiver); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Receiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Receiver) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
