// Code generated by mockery 2.9.4. DO NOT EDIT.

package subscription

import (
	domain "github.com/odpf/siren/domain"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionRepository is an autogenerated mock type for the SubscriptionRepository type
type SubscriptionRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SubscriptionRepositoryMock) Create(_a0 *Subscription, _a1 domain.NamespaceService, _a2 domain.ProviderService, _a3 domain.ReceiverService) (*Subscription, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *Subscription
	if rf, ok := ret.Get(0).(func(*Subscription, domain.NamespaceService, domain.ProviderService, domain.ReceiverService) *Subscription); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Subscription, domain.NamespaceService, domain.ProviderService, domain.ReceiverService) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SubscriptionRepositoryMock) Delete(_a0 uint64, _a1 domain.NamespaceService, _a2 domain.ProviderService, _a3 domain.ReceiverService) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, domain.NamespaceService, domain.ProviderService, domain.ReceiverService) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *SubscriptionRepositoryMock) Get(_a0 uint64) (*Subscription, error) {
	ret := _m.Called(_a0)

	var r0 *Subscription
	if rf, ok := ret.Get(0).(func(uint64) *Subscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *SubscriptionRepositoryMock) List() ([]*Subscription, error) {
	ret := _m.Called()

	var r0 []*Subscription
	if rf, ok := ret.Get(0).(func() []*Subscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields:
func (_m *SubscriptionRepositoryMock) Migrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SubscriptionRepositoryMock) Update(_a0 *Subscription, _a1 domain.NamespaceService, _a2 domain.ProviderService, _a3 domain.ReceiverService) (*Subscription, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *Subscription
	if rf, ok := ret.Get(0).(func(*Subscription, domain.NamespaceService, domain.ProviderService, domain.ReceiverService) *Subscription); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Subscription, domain.NamespaceService, domain.ProviderService, domain.ReceiverService) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
