// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	slack "github.com/slack-go/slack"

	testing "testing"
)

// SlackCaller is an autogenerated mock type for the SlackCaller type
type SlackCaller struct {
	mock.Mock
}

type SlackCaller_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackCaller) EXPECT() *SlackCaller_Expecter {
	return &SlackCaller_Expecter{mock: &_m.Mock}
}

// GetConversationsForUser provides a mock function with given fields: params
func (_m *SlackCaller) GetConversationsForUser(params *slack.GetConversationsForUserParameters) ([]slack.Channel, string, error) {
	ret := _m.Called(params)

	var r0 []slack.Channel
	if rf, ok := ret.Get(0).(func(*slack.GetConversationsForUserParameters) []slack.Channel); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slack.Channel)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(*slack.GetConversationsForUserParameters) string); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*slack.GetConversationsForUserParameters) error); ok {
		r2 = rf(params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SlackCaller_GetConversationsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConversationsForUser'
type SlackCaller_GetConversationsForUser_Call struct {
	*mock.Call
}

// GetConversationsForUser is a helper method to define mock.On call
//  - params *slack.GetConversationsForUserParameters
func (_e *SlackCaller_Expecter) GetConversationsForUser(params interface{}) *SlackCaller_GetConversationsForUser_Call {
	return &SlackCaller_GetConversationsForUser_Call{Call: _e.mock.On("GetConversationsForUser", params)}
}

func (_c *SlackCaller_GetConversationsForUser_Call) Run(run func(params *slack.GetConversationsForUserParameters)) *SlackCaller_GetConversationsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slack.GetConversationsForUserParameters))
	})
	return _c
}

func (_c *SlackCaller_GetConversationsForUser_Call) Return(channels []slack.Channel, nextCursor string, err error) *SlackCaller_GetConversationsForUser_Call {
	_c.Call.Return(channels, nextCursor, err)
	return _c
}

// GetUserByEmail provides a mock function with given fields: _a0
func (_m *SlackCaller) GetUserByEmail(_a0 string) (*slack.User, error) {
	ret := _m.Called(_a0)

	var r0 *slack.User
	if rf, ok := ret.Get(0).(func(string) *slack.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackCaller_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type SlackCaller_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//  - _a0 string
func (_e *SlackCaller_Expecter) GetUserByEmail(_a0 interface{}) *SlackCaller_GetUserByEmail_Call {
	return &SlackCaller_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", _a0)}
}

func (_c *SlackCaller_GetUserByEmail_Call) Run(run func(_a0 string)) *SlackCaller_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SlackCaller_GetUserByEmail_Call) Return(_a0 *slack.User, _a1 error) *SlackCaller_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SendMessage provides a mock function with given fields: _a0, _a1
func (_m *SlackCaller) SendMessage(_a0 string, _a1 ...slack.MsgOption) (string, string, string, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) string); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, ...slack.MsgOption) string); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, ...slack.MsgOption) string); ok {
		r2 = rf(_a0, _a1...)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, ...slack.MsgOption) error); ok {
		r3 = rf(_a0, _a1...)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SlackCaller_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type SlackCaller_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//  - _a0 string
//  - _a1 ...slack.MsgOption
func (_e *SlackCaller_Expecter) SendMessage(_a0 interface{}, _a1 ...interface{}) *SlackCaller_SendMessage_Call {
	return &SlackCaller_SendMessage_Call{Call: _e.mock.On("SendMessage",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *SlackCaller_SendMessage_Call) Run(run func(_a0 string, _a1 ...slack.MsgOption)) *SlackCaller_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slack.MsgOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(slack.MsgOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SlackCaller_SendMessage_Call) Return(_a0 string, _a1 string, _a2 string, _a3 error) *SlackCaller_SendMessage_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

// NewSlackCaller creates a new instance of SlackCaller. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackCaller(t testing.TB) *SlackCaller {
	mock := &SlackCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
