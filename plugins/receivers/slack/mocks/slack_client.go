// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	slack "github.com/odpf/siren/plugins/receivers/slack"
	mock "github.com/stretchr/testify/mock"
)

// SlackClient is an autogenerated mock type for the SlackClient type
type SlackClient struct {
	mock.Mock
}

type SlackClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackClient) EXPECT() *SlackClient_Expecter {
	return &SlackClient_Expecter{mock: &_m.Mock}
}

// ExchangeAuth provides a mock function with given fields: ctx, authCode, clientID, clientSecret
func (_m *SlackClient) ExchangeAuth(ctx context.Context, authCode string, clientID string, clientSecret string) (slack.Credential, error) {
	ret := _m.Called(ctx, authCode, clientID, clientSecret)

	var r0 slack.Credential
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) slack.Credential); ok {
		r0 = rf(ctx, authCode, clientID, clientSecret)
	} else {
		r0 = ret.Get(0).(slack.Credential)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, authCode, clientID, clientSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackClient_ExchangeAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeAuth'
type SlackClient_ExchangeAuth_Call struct {
	*mock.Call
}

// ExchangeAuth is a helper method to define mock.On call
//  - ctx context.Context
//  - authCode string
//  - clientID string
//  - clientSecret string
func (_e *SlackClient_Expecter) ExchangeAuth(ctx interface{}, authCode interface{}, clientID interface{}, clientSecret interface{}) *SlackClient_ExchangeAuth_Call {
	return &SlackClient_ExchangeAuth_Call{Call: _e.mock.On("ExchangeAuth", ctx, authCode, clientID, clientSecret)}
}

func (_c *SlackClient_ExchangeAuth_Call) Run(run func(ctx context.Context, authCode string, clientID string, clientSecret string)) *SlackClient_ExchangeAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *SlackClient_ExchangeAuth_Call) Return(_a0 slack.Credential, _a1 error) *SlackClient_ExchangeAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWorkspaceChannels provides a mock function with given fields: ctx, opts
func (_m *SlackClient) GetWorkspaceChannels(ctx context.Context, opts ...slack.ClientCallOption) ([]slack.Channel, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []slack.Channel
	if rf, ok := ret.Get(0).(func(context.Context, ...slack.ClientCallOption) []slack.Channel); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slack.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...slack.ClientCallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackClient_GetWorkspaceChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceChannels'
type SlackClient_GetWorkspaceChannels_Call struct {
	*mock.Call
}

// GetWorkspaceChannels is a helper method to define mock.On call
//  - ctx context.Context
//  - opts ...slack.ClientCallOption
func (_e *SlackClient_Expecter) GetWorkspaceChannels(ctx interface{}, opts ...interface{}) *SlackClient_GetWorkspaceChannels_Call {
	return &SlackClient_GetWorkspaceChannels_Call{Call: _e.mock.On("GetWorkspaceChannels",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *SlackClient_GetWorkspaceChannels_Call) Run(run func(ctx context.Context, opts ...slack.ClientCallOption)) *SlackClient_GetWorkspaceChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slack.ClientCallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(slack.ClientCallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *SlackClient_GetWorkspaceChannels_Call) Return(_a0 []slack.Channel, _a1 error) *SlackClient_GetWorkspaceChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Notify provides a mock function with given fields: ctx, conf, message, opts
func (_m *SlackClient) Notify(ctx context.Context, conf slack.NotificationConfig, message slack.Message, opts ...slack.ClientCallOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, conf, message)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slack.NotificationConfig, slack.Message, ...slack.ClientCallOption) error); ok {
		r0 = rf(ctx, conf, message, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackClient_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type SlackClient_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//  - ctx context.Context
//  - conf slack.NotificationConfig
//  - message slack.Message
//  - opts ...slack.ClientCallOption
func (_e *SlackClient_Expecter) Notify(ctx interface{}, conf interface{}, message interface{}, opts ...interface{}) *SlackClient_Notify_Call {
	return &SlackClient_Notify_Call{Call: _e.mock.On("Notify",
		append([]interface{}{ctx, conf, message}, opts...)...)}
}

func (_c *SlackClient_Notify_Call) Run(run func(ctx context.Context, conf slack.NotificationConfig, message slack.Message, opts ...slack.ClientCallOption)) *SlackClient_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slack.ClientCallOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(slack.ClientCallOption)
			}
		}
		run(args[0].(context.Context), args[1].(slack.NotificationConfig), args[2].(slack.Message), variadicArgs...)
	})
	return _c
}

func (_c *SlackClient_Notify_Call) Return(_a0 error) *SlackClient_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSlackClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSlackClient creates a new instance of SlackClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackClient(t mockConstructorTestingTNewSlackClient) *SlackClient {
	mock := &SlackClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
